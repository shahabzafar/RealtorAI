backend:
package.json:
"
{
  "name": "ai-realtor-backend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "axios": "^1.7.7",
    "bcrypt": "^5.1.1",
    "connect-redis": "^7.1.1",
    "cors": "^2.8.5",
    "csurf": "^1.10.0",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "express-rate-limit": "^7.4.1",
    "express-session": "^1.18.1",
    "express-validator": "^7.2.0",
    "helmet": "^8.0.0",
    "passport": "^0.7.0",
    "passport-facebook": "^3.0.0",
    "passport-google-oauth20": "^2.0.0",
    "passport-instagram": "^1.0.0",
    "passport-local": "^1.0.0",
    "passport-microsoft": "^2.1.0",
    "pg": "^8.13.1",
    "redis": "^4.7.0"
  },
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "main": "server.js",
  "devDependencies": {
    "nodemon": "^2.0.15"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "Backend server for AI Realtor app"
}
"

server.js:
"
const express = require('express');
const axios = require('axios');
const session = require('express-session');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
require('dotenv').config();
const RedisStore = require('connect-redis').default;
const redis = require('redis');
const cors = require('cors');
const { body, validationResult } = require('express-validator');
const rateLimit = require('express-rate-limit');
const { Pool } = require('pg');
const helmet = require('helmet');
const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcrypt');

// First declare the environment variables 
const FRONTEND_URL = process.env.NODE_ENV === 'development' 
  ? 'http://localhost:3000'
  : 'https://realtortempai.onrender.com';

const BACKEND_URL = process.env.NODE_ENV === 'development'
  ? 'http://localhost:5000'
  : 'https://realtortempaibackend.onrender.com';

// Force development mode if needed
if (process.env.NODE_ENV !== 'production') {
  process.env.NODE_ENV = 'development';
}

// Then log them
console.log('Current environment:', process.env.NODE_ENV);
console.log('Frontend URL:', FRONTEND_URL);
console.log('Backend URL:', BACKEND_URL);

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware setup
app.use(helmet());
app.use(express.json());
app.set('trust proxy', 1); // Trust first proxy

// Rate limiter
const limiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 100, // Limit each IP to 100 requests per window
});
app.use(limiter);

// Database pool
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false, // Adjust based on your SSL configuration
  },
});

// Helper functions
async function findRealtorByGoogleId(googleId) {
  const result = await pool.query('SELECT * FROM realtors WHERE google_id = $1', [googleId]);
  return result.rows[0];
}

async function createRealtor(userData) {
  const { googleId, firstName, lastName, email, phoneNumber } = userData;
  const result = await pool.query(
    `INSERT INTO realtors (google_id, first_name, last_name, email, phone_number)
     VALUES ($1, $2, $3, $4, $5) RETURNING *`,
    [googleId, firstName, lastName, email, phoneNumber]
  );
  return result.rows[0];
}

async function findRealtorById(id) {
  const result = await pool.query('SELECT * FROM realtors WHERE id = $1', [id]);
  return result.rows[0];
}

async function saveSellerData(realtorId, data) {
  const {
    firstName,
    lastName,
    email,
    askingPrice,
    size,
    propertyType,
    bedrooms,
    bathrooms,
    location,
  } = data;

  await pool.query(
    `INSERT INTO seller_data (
      realtor_id, first_name, last_name, email, asking_price, size, property_type, bedrooms, bathrooms, location
    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`,
    [
      realtorId,
      firstName,
      lastName,
      email,
      askingPrice,
      size,
      propertyType,
      bedrooms,
      bathrooms,
      location,
    ]
  );
}

async function getSellerDataByRealtorId(realtorId) {
  const result = await pool.query('SELECT * FROM seller_data WHERE realtor_id = $1', [realtorId]);
  return result.rows;
}

// Session configuration
const sessionConfig = {
  secret: process.env.SESSION_SECRET || 'your_secret_key',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    httpOnly: true,
    sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax',
    maxAge: 24 * 60 * 60 * 1000, // 1 day
  },
};

// Configure Redis for production environment
if (process.env.NODE_ENV === 'production') {
  const redisClient = redis.createClient({
    url: process.env.REDIS_URL,
  });

  redisClient.connect().catch(console.error);
  redisClient.on('connect', () => console.log('Connected to Redis successfully.'));
  redisClient.on('error', (err) => console.error('Redis connection error:', err));

  sessionConfig.store = new RedisStore({ client: redisClient });
}

// CORS settings
app.use(
  cors({
    origin: FRONTEND_URL,
    credentials: true,
  })
);

// Session and Passport middleware
app.use(session(sessionConfig));
app.use(passport.initialize());
app.use(passport.session());

// Passport strategies
passport.use(
  new GoogleStrategy(
    {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackURL: `${BACKEND_URL}/auth/google/callback`,
    },
    async (accessToken, refreshToken, profile, done) => {
      try {
        let realtor = await findRealtorByGoogleId(profile.id);
        if (!realtor) {
          realtor = await createRealtor({
            googleId: profile.id,
            firstName: profile.name.givenName,
            lastName: profile.name.familyName,
            email: profile.emails[0].value,
          });
        }
        return done(null, realtor);
      } catch (error) {
        return done(error);
      }
    }
  )
);

passport.use(
  new LocalStrategy({ usernameField: 'email' }, async (email, password, done) => {
    try {
      const result = await pool.query('SELECT * FROM realtors WHERE email = $1', [email]);
      const realtor = result.rows[0];
      if (!realtor) {
        return done(null, false, { message: 'Incorrect email or password.' });
      }
      if (!realtor.password) {
        return done(null, false, { message: 'Please log in with Google.' });
      }
      const isValid = await bcrypt.compare(password, realtor.password);
      if (!isValid) {
        return done(null, false, { message: 'Incorrect email or password.' });
      }
      return done(null, realtor);
    } catch (error) {
      return done(error);
    }
  })
);

// Authentication routes
app.post(
  '/auth/register',
  [
    body('firstName').isString(),
    body('lastName').isString(),
    body('email').isEmail(),
    body('password').isLength({ min: 6 }),
    body('phoneNumber').optional().isMobilePhone(),
  ],
  async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { firstName, lastName, email, password, phoneNumber } = req.body;

    try {
      // Check if the email already exists
      const existingUser = await pool.query('SELECT * FROM realtors WHERE email = $1', [email]);
      if (existingUser.rows.length > 0) {
        return res.status(400).json({ message: 'Email already in use.' });
      }

      // Hash the password
      const hashedPassword = await bcrypt.hash(password, 10);

      // Create new realtor
      const result = await pool.query(
        `INSERT INTO realtors (first_name, last_name, email, password, phone_number)
         VALUES ($1, $2, $3, $4, $5) RETURNING *`,
        [firstName, lastName, email, hashedPassword, phoneNumber]
      );
      const newRealtor = result.rows[0];

      // Automatically log in the new user
      req.login(newRealtor, (err) => {
        if (err) return next(err);
        res.json({
          message: 'Registration successful',
          user: {
            id: newRealtor.id,
            email: newRealtor.email,
            firstName: newRealtor.first_name || newRealtor.firstName,
            lastName: newRealtor.last_name || newRealtor.lastName,
            displayName: `${newRealtor.first_name || newRealtor.firstName} ${
              newRealtor.last_name || newRealtor.lastName
            }`,
          },
        });
      });
    } catch (error) {
      console.error('Registration error:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
);

app.post(
  '/auth/login',
  [body('email').isEmail(), body('password').exists()],
  (req, res, next) => {
    passport.authenticate('local', (err, realtor, info) => {
      if (err) return next(err);
      if (!realtor) {
        return res.status(400).json({ message: info.message });
      }
      req.logIn(realtor, (err) => {
        if (err) return next(err);
        res.json({
          message: 'Login successful',
          user: {
            id: realtor.id,
            email: realtor.email,
            firstName: realtor.first_name || realtor.firstName,
            lastName: realtor.last_name || realtor.lastName,
            displayName: `${realtor.first_name || realtor.firstName} ${
              realtor.last_name || realtor.lastName
            }`,
          },
        });
      });
    })(req, res, next);
  }
);

// Serialize and deserialize user
passport.serializeUser((realtor, done) => {
  done(null, realtor.id);
});

passport.deserializeUser(async (id, done) => {
  try {
    const realtor = await findRealtorById(id);
    done(null, realtor);
  } catch (error) {
    done(error);
  }
});

// OAuth routes
app.get('/auth/google', passport.authenticate('google', { scope: ['profile', 'email'] }));

app.get(
  '/auth/google/callback',
  passport.authenticate('google', { failureRedirect: '/' }),
  (req, res) => {
    console.log('Authenticated user:', req.user);
    console.log('Redirecting to:', `${FRONTEND_URL}/realtor`);
    res.redirect(`${FRONTEND_URL}/realtor`);
  }
);

// Route to check if the user is authenticated
app.get('/auth/user', (req, res) => {
  console.log('Full req.user object:', req.user);

  if (req.isAuthenticated() && req.user) {
    const userData = {
      user: {
        id: req.user.id,
        email: req.user.email,
        firstName: req.user.first_name || req.user.firstName,
        lastName: req.user.last_name || req.user.lastName,
        displayName: `${req.user.first_name || req.user.firstName} ${
          req.user.last_name || req.user.lastName
        }`,
      },
    };
    console.log('Sending user data to frontend:', userData);
    res.json(userData);
  } else {
    console.log('No authenticated user found');
    res.status(401).json({ message: 'Unauthorized' });
  }
});

// Logout route
app.get('/auth/logout', (req, res) => {
  console.log('Logout requested');
  req.logout((err) => {
    if (err) {
      console.error('Logout error:', err);
      return res.status(500).json({ error: 'Failed to log out' });
    }
    req.session.destroy((err) => {
      if (err) {
        console.error('Session destruction error:', err);
        return res.status(500).json({ error: 'Failed to destroy session' });
      }
      console.log('Logout successful');
      res.json({ message: 'Logged out successfully' });
    });
  });
});

// Endpoint for generating Zapier link
app.post('/generate-link', async (req, res) => {
  try {
    const zapierWebhookUrl = process.env.ZAPIER_WEBHOOK_URL;
    await axios.post(zapierWebhookUrl, {
      realtorId: req.body.realtorId,
    });

    const generatedLink = 'https://form-interface-ee593b.zapier.app/';
    if (generatedLink) {
      console.log('Received link from Zapier:', generatedLink);
      res.json({ link: generatedLink });
    } else {
      console.error('Error: Zapier response does not contain a link.');
      res.status(500).json({ error: 'Failed to generate link.' });
    }
  } catch (error) {
    console.error('Error generating link from Zapier:', error);
    res.status(500).send('Error generating link');
  }
});

// Endpoint for receiving data from Zapier
app.post(
  '/setSellerData',
  ensureAuthenticated,
  [
    body('LeadName').isString(),
    body('Contact').isString(),
    body('LeadEmail').isEmail(),
    body('AskingPrice').isNumeric(),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    try {
      const userId = req.user.id;
      await saveSellerData(userId, req.body);
      res.json({ message: 'Data received successfully!' });
    } catch (error) {
      console.error('Error saving seller data:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
);

function ensureAuthenticated(req, res, next) {
  const zapierToken = req.headers['BypassForZapier']; // Use a custom header for Zapier

  if (req.isAuthenticated()) {
    return next();
  }

  if (zapierToken === process.env.ZAPIER_TOKEN) {
    return next(); 
  }

  return res.status(401).json({ message: 'Unauthorized' });
}

// Endpoint for frontend data request
app.get('/getSellerData', ensureAuthenticated, async (req, res) => {
  console.log('Authenticated user:', req.user);
  try {
    const userId = req.user.id;
    const data = await getSellerDataByRealtorId(userId);
    res.json(data);
  } catch (error) {
    console.error('Error fetching seller data:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
  console.log('Environment:', process.env.NODE_ENV);
});
"


frontend:
package.json:
"
{
  "name": "ai-realtor-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.7",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.28.0",
    "react-scripts": "^5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "@babel/plugin-transform-private-property-in-object": "^7.25.8"
  },
  "engines": {
    "node": "22.11.0"
  }
}
"


common:
header.jsx:
"
import React, { useState, useRef, useEffect } from 'react';
import { Link } from 'react-router-dom';
import '../../styles/Home/Header.css'; // you can move/rename this if you prefer

const Header = ({ user, onLogout }) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef(null);

  // Close dropdown if clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsDropdownOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <header className="containerHeader">
      <h1>AI Realtor</h1>
      <nav>
        <ul>
          <li>
            <Link to="/">Home</Link>
          </li>

          {/*
            Remove this if you don’t want a /buy route anymore:
          */}
          {/* <li>
            <Link to="/buy">Buy</Link>
          </li> */}

          <li>
            <Link to="/realtor">Realtor</Link>
          </li>

          {user ? (
            // If user is logged in
            <li className="user-menu" ref={dropdownRef}>
              <button
                className="user-menu-button"
                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
              >
                {user.firstName && user.lastName
                  ? `${user.firstName} ${user.lastName}`
                  : user.displayName || 'Welcome User'}
                &nbsp;▼
              </button>
              {isDropdownOpen && (
                <div className="user-dropdown">
                  <button
                    onClick={() => {
                      onLogout();
                      setIsDropdownOpen(false);
                    }}
                  >
                    Logout
                  </button>
                </div>
              )}
            </li>
          ) : (
            // If user is not logged in
            <>
              <li>
                <Link to="/signin" className="sign-in-link">
                  Sign In
                </Link>
              </li>
              <li>
                <Link to="/signup" className="sign-up-link">
                  Sign Up
                </Link>
              </li>
            </>
          )}
        </ul>
      </nav>
    </header>
  );
};

export default Header;
"


public:
manifest.json:
"
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
"


src:
App.jsx:
"
import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import axios from 'axios';

import HomeApp from './components/Home/HomeApp';
import RealtorApp from './components/Realtor/RealtorApp';
import SignIn from './components/Auth/SignIn';
import SignUp from './components/Auth/SignUp';
import PrivateRoute from './components/Auth/PrivateRoute';

// Configure Axios
axios.defaults.withCredentials = true;
axios.defaults.baseURL = 'https://realtortempaibackend.onrender.com';

function App() {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  // Fetch user data on component mount
  const fetchUser = async () => {
    try {
      const res = await axios.get('/auth/user');
      console.log('Raw user data received:', res.data);
      if (res.data && res.data.user) {
        setUser({
          id: res.data.user.id,
          email: res.data.user.email,
          firstName: res.data.user.firstName,
          lastName: res.data.user.lastName,
          displayName: res.data.user.displayName,
        });
      } else {
        setUser(null);
      }
    } catch (error) {
      console.error('Error fetching user:', error);
      setUser(null);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchUser();
  }, []);

  const handleLogin = () => {
    window.location.href = 'https://realtortempaibackend.onrender.com/auth/google';
  };

  const handleLogout = async () => {
    try {
      await axios.get('/auth/logout');
      setUser(null);
      window.location.href = '/'; // Redirect to home after logout
    } catch (error) {
      console.error('Error logging out:', error);
    }
  };

  return (
    <Router>
      {isLoading ? (
        <div>Loading...</div>
      ) : (
        <Routes>
          <Route path="/" element={<HomeApp user={user} onLogout={handleLogout} />} />
          <Route
            path="/signin"
            element={
              user ? (
                <Navigate to="/realtor" />
              ) : (
                <SignIn onLogin={handleLogin} setUser={setUser} />
              )
            }
          />
          <Route
            path="/signup"
            element={
              user ? (
                <Navigate to="/realtor" />
              ) : (
                <SignUp setUser={setUser} />
              )
            }
          />
          <Route
            path="/realtor"
            element={
              <PrivateRoute user={user}>
                <RealtorApp user={user} onLogout={handleLogout} />
              </PrivateRoute>
            }
          />
          {/* Add other routes as needed */}
        </Routes>
      )}
    </Router>
  );
}

export default App;
"

index.js:
"
import React from 'react';
import ReactDOM from 'react-dom';
import './styles/Home/global.css';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);


"


Auth:
PrivateRoute.jsx:
"
import React from 'react';
import { Navigate } from 'react-router-dom';

const PrivateRoute = ({ user, children }) => {
  return user ? children : <Navigate to="/signin" />;
};

export default PrivateRoute;
"

SignIn.jsx:
"
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../../styles/Auth/Auth.css';

const SignIn = ({ onLogin, setUser }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/auth/login', { email, password });
      console.log('Login successful:', response.data);

      setUser({
        id: response.data.user.id,
        email: response.data.user.email,
        firstName: response.data.user.firstName,
        lastName: response.data.user.lastName,
        displayName: response.data.user.displayName,
      });

      navigate('/realtor');
    } catch (error) {
      console.error('Login error:', error.response?.data || error.message);
      alert(error.response?.data?.message || 'Login failed');
    }
  };

  const handleGoogleLogin = () => {
    window.location.href = 'https://realtortempaibackend.onrender.com/auth/google';
  };

  return (
    <div className="auth-container">
      <div className="auth-form">
        <h2>Sign In</h2>
        <form onSubmit={handleSubmit}>
          {/* Email */}
          <div className="form-group">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          {/* Password */}
          <div className="form-group">
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>

          {/* Submit Button */}
          <button type="submit" className="auth-button">
            Sign In
          </button>
        </form>

        <div className="divider">or</div>

        {/* Google Login Button */}
        <button onClick={handleGoogleLogin} className="google-button">
          Login with Google
        </button>

        {/* Link to Sign Up */}
        <p className="auth-link">
          Don't have an account? <Link to="/signup">Sign Up</Link>
        </p>
      </div>
    </div>
  );
};

export default SignIn;
"

SignUp.jsx:
"
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../../styles/Auth/Auth.css';

const SignUp = ({ setUser }) => {
  const [firstName, setFirstName] = useState(''); // For 'firstName'
  const [lastName, setLastName] = useState(''); // For 'lastName'
  const [email, setEmail] = useState(''); // For 'email'
  const [password, setPassword] = useState(''); // For 'password'
  const [confirmPassword, setConfirmPassword] = useState(''); // For 'confirmPassword'
  const [phoneNumber, setPhoneNumber] = useState(''); // For 'phoneNumber'

  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Check if passwords match
    if (password !== confirmPassword) {
      alert('Passwords do not match.');
      return;
    }

    try {
      const response = await axios.post('/auth/register', {
        firstName,
        lastName,
        email,
        password,
        phoneNumber,
      });

      console.log('Registration successful:', response.data);

      setUser({
        id: response.data.user.id,
        email: response.data.user.email,
        firstName: response.data.user.firstName,
        lastName: response.data.user.lastName,
        displayName: response.data.user.displayName,
      });

      navigate('/realtor');
    } catch (error) {
      console.error('Registration error:', error.response?.data || error.message);
      alert(error.response?.data?.message || 'Registration failed');
    }
  };

  return (
    <div className="auth-container">
      <div className="auth-form">
        <h2>Sign Up</h2>
        <form onSubmit={handleSubmit}>
          {/* First Name */}
          <div className="form-group">
            <input
              type="text"
              placeholder="First Name"
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
              required
            />
          </div>

          {/* Last Name */}
          <div className="form-group">
            <input
              type="text"
              placeholder="Last Name"
              value={lastName}
              onChange={(e) => setLastName(e.target.value)}
              required
            />
          </div>

          {/* Phone Number */}
          <div className="form-group">
            <input
              type="tel"
              placeholder="Phone Number"
              value={phoneNumber}
              onChange={(e) => setPhoneNumber(e.target.value)}
            />
          </div>

          {/* Email */}
          <div className="form-group">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          {/* Password */}
          <div className="form-group">
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>

          {/* Confirm Password */}
          <div className="form-group">
            <input
              type="password"
              placeholder="Confirm Password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
            />
          </div>

          {/* Submit Button */}
          <button type="submit" className="auth-button">
            Register
          </button>
        </form>

        {/* Link to Sign In */}
        <p className="auth-link">
          Already have an account? <Link to="/signin">Sign In</Link>
        </p>
      </div>
    </div>
  );
};

export default SignUp;
"


Home:
FeaturedProperties.jsx:
"
import React, { useState, useEffect } from 'react';
import '../../styles/Home/FeaturedProperties.css';

const FeaturedProperties = () => {
  const properties = [
    {
      images: [
        process.env.PUBLIC_URL + '/images/image1.jpg',
        process.env.PUBLIC_URL + '/images/image2.jpg',
        process.env.PUBLIC_URL + '/images/image3.jpg'
      ],
      details: [
        { title: '3 Bedroom Modern House', price: '$800,000' },
        { title: '4 Bedroom Luxury Villa', price: '$1,200,000' },
        { title: '3 Bedroom Smart Home', price: '$950,000' },
      ]
    },
    {
      images: ['/images/image4.jpg', '/images/image5.jpg', '/images/image6.jpg'],
      details: [
        { title: '2 Bedroom Cottage', price: '$650,000' },
        { title: '2 Bedroom Condo', price: '$550,000' },
        { title: '2 Bedroom Townhouse', price: '$600,000' },
      ]
    },
    {
      images: ['/images/image7.jpg', '/images/image1.jpg', '/images/image2.jpg'],
      details: [
        { title: '5 Bedroom Estate', price: '$1,300,000' },
        { title: '4 Bedroom Manor', price: '$1,100,000' },
        { title: '5 Bedroom Mansion', price: '$1,500,000' },
      ]
    }
  ];

  // Separate state for each card
  const [firstCardIndex, setFirstCardIndex] = useState(0);
  const [secondCardIndex, setSecondCardIndex] = useState(0);
  const [thirdCardIndex, setThirdCardIndex] = useState(0);

  // Staggered intervals for each card
  useEffect(() => {
    // First card starts immediately and changes every 4 seconds
    const firstInterval = setInterval(() => {
      setFirstCardIndex(prev => (prev + 1) % 3);
    }, 4000);

    // Second card starts after 2 seconds delay
    const secondStart = setTimeout(() => {
      setSecondCardIndex(1); // Start with second image
      // Then continue every 4 seconds
      const secondInterval = setInterval(() => {
        setSecondCardIndex(prev => (prev + 1) % 3);
      }, 4000);
      
      return () => clearInterval(secondInterval);
    }, 2000);

    // Third card starts after 4 seconds delay
    const thirdStart = setTimeout(() => {
      setThirdCardIndex(2); // Start with third image
      // Then continue every 4 seconds
      const thirdInterval = setInterval(() => {
        setThirdCardIndex(prev => (prev + 1) % 3);
      }, 4000);
      
      return () => clearInterval(thirdInterval);
    }, 4000);

    return () => {
      clearInterval(firstInterval);
      clearTimeout(secondStart);
      clearTimeout(thirdStart);
    };
  }, []);

  return (
    <section className="featured-properties">
      <div className="containerProp">
        <h3>Featured Properties</h3>
        <div className="property-grid">
          <div className="property">
            <div className="property-image-container">
              {properties[0].images.map((img, imgIndex) => (
                <div
                  key={imgIndex}
                  className={`property-image ${imgIndex === firstCardIndex ? 'active' : ''}`}
                >
                  <img src={img} alt={`Property 1`} />
                </div>
              ))}
            </div>
            <div className="property-details">
              <p>{properties[0].details[firstCardIndex].title}</p>
              <p className="price">{properties[0].details[firstCardIndex].price}</p>
            </div>
          </div>

          <div className="property">
            <div className="property-image-container">
              {properties[1].images.map((img, imgIndex) => (
                <div
                  key={imgIndex}
                  className={`property-image ${imgIndex === secondCardIndex ? 'active' : ''}`}
                >
                  <img src={img} alt={`Property 2`} />
                </div>
              ))}
            </div>
            <div className="property-details">
              <p>{properties[1].details[secondCardIndex].title}</p>
              <p className="price">{properties[1].details[secondCardIndex].price}</p>
            </div>
          </div>

          <div className="property">
            <div className="property-image-container">
              {properties[2].images.map((img, imgIndex) => (
                <div
                  key={imgIndex}
                  className={`property-image ${imgIndex === thirdCardIndex ? 'active' : ''}`}
                >
                  <img src={img} alt={`Property 3`} />
                </div>
              ))}
            </div>
            <div className="property-details">
              <p>{properties[2].details[thirdCardIndex].title}</p>
              <p className="price">{properties[2].details[thirdCardIndex].price}</p>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default FeaturedProperties;
"

Footer.jsx:
"
import React from 'react';
import '../../styles/Home/Footer.css';


const Footer = () => {
  return (
    <footer className="footer">
      <div className="footer-container">
        <div className="footer-section footer-logo">
          <h2>AI Realtor</h2>
        </div>

        <div className="footer-section footer-links">
          <ul>
            <li><a href="#">Home</a></li>
            <li><a href="#">Buy</a></li>
            <li><a href="#">Sell</a></li>
            <li><a href="#">About Us</a></li>
          </ul>
        </div>

        <div className="footer-section footer-contact">
          <h4>Contact Us</h4>
          <form className="contact-form">
            <div className="contact-left">
              <input type="email" placeholder="Email *" required />
              <input type="text" placeholder="Phone *" required />
              <button type="submit">Contact</button>
            </div>
            <div className="contact-right">
              <textarea placeholder="Type your message here" required></textarea>
            </div>
          </form>
        </div>
      </div>

      <div className="footer-bottom">
        <p>&copy; 2024 AI Realtor. All rights reserved.</p>
      </div>
    </footer>
  );
};

export default Footer;
"

Header.jsx:
"
import React, { useState, useRef, useEffect } from 'react';
import { Link } from 'react-router-dom';
import '../../styles/Home/Header.css';

const Header = ({ user, onLogout }) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  useEffect(() => {
    console.log('Header received user:', user);
    console.log('User display name:', user?.displayName);
    console.log('User name:', user?.name);
  }, [user]);

  return (
    <header className="containerHeader">
      <h1>AI Realtor</h1>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          <li><Link to="/buy">Buy</Link></li>
          <li><Link to="/realtor">Realtor</Link></li>
          {user ? (
            <li className="user-menu" ref={dropdownRef}>
              <button
                className="user-menu-button"
                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
              >
                {user.firstName && user.lastName
                  ? `${user.firstName} ${user.lastName}`
                  : user.displayName || 'Welcome User'} ▼
              </button>
              {isDropdownOpen && (
                <div className="user-dropdown">
                  <button onClick={() => {
                    onLogout();
                    setIsDropdownOpen(false);
                  }}>Logout</button>
                </div>
              )}
            </li>
          ) : (
            <li><Link to="/signin" className="sign-in-link">Sign In</Link></li>
          )}
        </ul>
      </nav>
    </header>
  );
};

export default Header;
"

Hero.jsx:
"
import React from 'react';
import '../../styles/Home/Hero.css';

const Hero = () => {
  return (
    <section className="hero">
      <div className="containerHero">
        <h2>Welcome to AI Realtor</h2>
        <p>Finding your dream home by pairing a realtor with AI</p>
        <form action="#">
          <input type="text" placeholder="Search by city, address, or postal code" />
          <button type="submit">Get Started</button>
        </form>
      </div>
    </section>
  );
};

export default Hero;
"

HomeApp.jsx:
"
import React from 'react';
import Header from './Header';
import Hero from './Hero';
import FeaturedProperties from './FeaturedProperties';
import Services from './Services';
import RealEstateTrends from './RealEstateTrends';
import Footer from './Footer';
import '../../styles/Home/global.css';

const HomeApp = ({ user, onLogout }) => {
  return (
    <div>
      <Header user={user} onLogout={onLogout} />
      <Hero />
      <FeaturedProperties />
      <Services />
      <RealEstateTrends />
      <Footer />
    </div>
  );
};

export default HomeApp;
"

RealEstateTrends.jsx:
"
import React, { useState } from 'react';
import '../../styles/Home/RealEstateTrends.css';

const RealEstateTrends = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  
  const images = [
    '/images/trends.jpg',
    '/images/trends2.jpg',
    '/images/trends3.jpg'
  ];

  const handlePrev = () => {
    setCurrentIndex((prevIndex) => (prevIndex === 0 ? images.length - 1 : prevIndex - 1));
  };

  const handleNext = () => {
    setCurrentIndex((prevIndex) => (prevIndex === images.length - 1 ? 0 : prevIndex + 1));
  };

  return (
    <section className="real-estate-trends">
      <div className="container">
        <h3>Real Estate Trends</h3>
        <div className="trends-carousel">
          <button className="carousel-control prev" onClick={handlePrev}>❮</button>
          <div className="carousel-slide active">
            <img src={images[currentIndex]} alt={`Real Estate Trend ${currentIndex + 1}`} />
          </div>
          <button className="carousel-control next" onClick={handleNext}>❯</button>
        </div>
      </div>
    </section>
  );
};

export default RealEstateTrends;
"

Services.jsx:
"
import React from 'react';
import '../../styles/Home/Services.css';

const Services = () => {
  return (
    <section className="services-section">
      <div className="services-container">
        <h2 className="services-heading">Our Services</h2>
        <div className="services-grid">
          <div className="service-card">
            <div className="service-image-container">
              <img src={process.env.PUBLIC_URL + "/images/propertyvaluation.png"} alt="Property Valuation" />
            </div>
            <div className="service-details">
              <p>Property Valuation</p>
              <p className="description">Accurate property values using advanced machine learning algorithms.</p>
            </div>
          </div>

          <div className="service-card">
            <div className="service-image-container">
              <img src={process.env.PUBLIC_URL + "/images/markettrends.jpg"} alt="Market Insights" />
            </div>
            <div className="service-details">
              <p>Market Insights</p>
              <p className="description">Get informed with real-time market trends and predictions.</p>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Services;
"


Realtor:
AiChat.jsx:
"
import React, { useState, useEffect, useRef } from 'react';
import '../../styles/Realtor/AiChat.css';

const AiChat = () => {
  const [showChat, setShowChat] = useState(false); // State for chat visibility
  const landbotInstanceRef = useRef(null);

  useEffect(() => {
    if (!landbotInstanceRef.current && showChat) {
      const loadLandbot = () => {
        landbotInstanceRef.current = new window.Landbot.Container({
          container: '#myLandbot',
          configUrl:
            'https://storage.googleapis.com/landbot.online/v3/H-2677681-SQEQ6FI3JEY1LKYE/index.json',
        });
      };

      if (window.Landbot) {
        loadLandbot();
      } else {
        const script = document.createElement('script');
        script.src = 'https://cdn.landbot.io/landbot-3/landbot-3.0.0.js';
        script.async = true;
        script.onload = loadLandbot;
        document.body.appendChild(script);
      }
    }
  }, [showChat]);

  const handleClick = () => {
    setShowChat(true); // Show chat
  };

  return (
    <section className="ai-chat">
      <div className="container">
        {!showChat && (
          <>
            <h3>Talk to our AI Agent</h3>
            <button onClick={handleClick}>Start Chat</button>
          </>
        )}
        {showChat && (
          <div id="myLandbot"></div>
        )}
      </div>
    </section>
  );
};

export default AiChat;
"

Carousel.jsx:
"
import React, { useState } from 'react';
import '../../styles/Realtor/Carousel.css';

const Carousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);

  // Sample images or infographics for the carousel
  const images = [
    { src: 'infographic1.jpg', alt: 'Infographic 1' },
    { src: 'infographic2.jpg', alt: 'Infographic 2' },
    { src: 'infographic3.jpg', alt: 'Infographic 3' },
  ];

  const handlePrev = () => {
    setCurrentIndex((prevIndex) => (prevIndex === 0 ? images.length - 1 : prevIndex - 1));
  };

  const handleNext = () => {
    setCurrentIndex((prevIndex) => (prevIndex === images.length - 1 ? 0 : prevIndex + 1));
  };

  return (
    <div className="carousel">
      <button className="carousel-control prev" onClick={handlePrev}>
        ❮
      </button>
      <div className="carousel-slide">
        <img src={images[currentIndex].src} alt={images[currentIndex].alt} />
      </div>
      <button className="carousel-control next" onClick={handleNext}>
        ❯
      </button>
    </div>
  );
};

export default Carousel;
"

GeneratedLeads.jsx:
"
import React, { useState, useEffect } from 'react';
import '../../styles/Realtor/GeneratedLeads.css';

const GeneratedLeads = () => {
  const [sellerLeadData, setSellerData] = useState({
    LeadName: "",
    Contact: "",
    Email: "",
    AskingPrice: "",
  });
  const [buyerLeadData, setBuyerData] = useState(null); // Placeholder for buyer leads

  const getDataFromZap = async () => {
    try {
      const response = await fetch("https://realtortempaibackend.onrender.com/getSellerData", {
        credentials: 'include',
      });
  
      if (!response.ok) {
        const errorText = await response.text();
        if (response.status === 401) {
          console.error("User not authenticated. Redirect to login.");
          // Redirect or notify the user
        }
        throw new Error(`Error ${response.status}: ${errorText}`);
      }
  
      const data = await response.json();
  
      setSellerData({
        LeadName: data.LeadName || "",
        Contact: data.Contact || "",
        Email: data.LeadEmail || "",
        AskingPrice: data.AskingPrice || "",
      });
    } catch (error) {
      console.error("Error fetching data: ", error);
    }
  };
  

  useEffect(() => {
    getDataFromZap(); 
    const intervalId = setInterval(getDataFromZap, 5000);
    return () => clearInterval(intervalId);
  }, []);

  const userName = 'Jaydeep';

  return (
    <section className="generated-leads">
      <h1 className="leads-header">Generated Leads</h1>
      <div className="leads-container">
        <div className="leads-section seller-leads">
          <h2>Seller Leads</h2>
          {sellerLeadData.LeadName ? (
            <div className="lead-card">
              <div className="lead-info">
                <p><strong>Full Name:</strong> {sellerLeadData.LeadName}</p>
                <p><strong>Contact Number:</strong> {sellerLeadData.Contact}</p>
                <p><strong>Email:</strong> {sellerLeadData.Email}</p>
                <p><strong>Selling Price:</strong> $ {sellerLeadData.AskingPrice}</p>
              </div>
            </div>
          ) : (
            <p>No seller leads available</p>
          )}
        </div>
        
        <div className="leads-section buyer-leads">
          <h2>Buyer Leads</h2>
          {buyerLeadData ? (
            <div className="lead-card">
              <div className="lead-info">
                <p><strong>Full Name:</strong> {buyerLeadData.LeadName}</p>
                <p><strong>Contact Number:</strong> {buyerLeadData.Contact}</p>
                <p><strong>Email:</strong> {buyerLeadData.Email}</p>
                <p><strong>Budget:</strong> $ {buyerLeadData.Budget}</p>
              </div>
            </div>
          ) : (
            <p>No buyer leads available</p>
          )}
        </div>
      </div>
    </section>
  );
};

export default GeneratedLeads;
"

Header.jsx:
"
import React, { useState, useRef, useEffect } from 'react';
import { Link } from 'react-router-dom';
import '../../styles/Home/Header.css';

const Header = ({ user, onLogout }) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef(null);

  useEffect(() => {
    // Close dropdown when clicking outside
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <header className="containerHeader">
      <h1>AI Realtor</h1>
      <nav>
        <ul>
          <li>
            <Link to="/">Home</Link>
          </li>
          <li>
            <Link to="/buy">Buy</Link>
          </li>
          <li>
            <Link to="/realtor">Realtor</Link>
          </li>
          {user ? (
            // If user is logged in
            <>
              <li className="user-menu" ref={dropdownRef}>
                <button
                  className="user-menu-button"
                  onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                >
                  {user.firstName && user.lastName
                    ? `${user.firstName} ${user.lastName}`
                    : user.displayName || 'Welcome User'}{' '}
                  ▼
                </button>
                {isDropdownOpen && (
                  <div className="user-dropdown">
                    <button
                      onClick={() => {
                        onLogout();
                        setIsDropdownOpen(false);
                      }}
                    >
                      Logout
                    </button>
                  </div>
                )}
              </li>
            </>
          ) : (
            // If user is not logged in
            <>
              <li>
                <Link to="/signin" className="sign-in-link">
                  Sign In
                </Link>
              </li>
              <li>
                <Link to="/signup" className="sign-up-link">
                  Sign Up
                </Link>
              </li>
            </>
          )}
        </ul>
      </nav>
    </header>
  );
};

export default Header;
"

PerformanceOverview.jsx:
"
import React from 'react';
import '../../styles/Realtor/PerformanceOverview.css';

const PerformanceOverview = () => {
  return (
    <section className="performance-overview">
      <h2>Performance Overview</h2>
      <p>Check your selling metrics at a glance</p>
      <button className="view-details">View Details</button>

      <div className="stats">
        <div className="stat-box">
          <span className="stat-title">Total Properties Listed</span>
          <span className="stat-value">30</span>
        </div>
        <div className="stat-box">
          <span className="stat-title">Properties Sold</span>
          <span className="stat-value">15</span>
        </div>
        <div className="stat-box">
          <span className="stat-title">Average Selling Price</span>
          <span className="stat-value">$250,000</span>
        </div>
      </div>

      <div className="sales-trends">
        <h3>Sales Trends</h3>
        <div className="sales-chart">
          {/* Placeholder for the sales chart */}
        </div>
      </div>
    </section>
  );
};

export default PerformanceOverview;
"

RealtorApp.jsx:
"
import React from 'react';
import '../../styles/Realtor/global.css';
import Header from './Header';
import PerformanceOverview from './PerformanceOverview';
import GeneratedLeads from './GeneratedLeads';
import RealtorProfileHeader from './RealtorProfileHeader';
import Footer from '../Home/Footer';
import Carousel from './Carousel';
import AiChat from './AiChat';

function RealtorApp({ user, onLogout }) {
  return (
    <div className="App">
      <Header user={user} onLogout={onLogout} />
      <RealtorProfileHeader user={user} />
      <PerformanceOverview />
      <GeneratedLeads />
      <div className="ai-chat-container">
        <AiChat />
      </div>
      <Carousel />
      <Footer />
    </div>
  );
}

export default RealtorApp;
"

RealtorProfileHeader.jsx:
"
import React, { useState } from 'react';
import axios from 'axios';
import '../../styles/Realtor/RealtorProfileHeader.css';

const RealtorProfileHeader = ({ user }) => {
  const [linkGenerated, setLinkGenerated] = useState(false);
  const [generatedLink, setGeneratedLink] = useState('');
  const [isShareDrawerOpen, setShareDrawerOpen] = useState(false);

  const handleGenerateLink = async () => {
    try {
      // Reset link state before generating a new one
      setGeneratedLink('');
      setLinkGenerated(false);
  
      const response = await axios.post('/generate-link', {
        realtorId: user.id,
      });
  
      const data = response.data;
      console.log('Response from backend:', data);
  
      if (data.link) {
        setGeneratedLink(data.link);
        setLinkGenerated(true);
      } else {
        console.error('Error: No link returned from backend');
        // Set the default link
        setGeneratedLink('https://form-interface-ee593b.zapier.app/');
        setLinkGenerated(true);
      }
    } catch (error) {
      console.error('Error generating link:', error);
      // Set the default link in case of error
      setGeneratedLink('https://form-interface-ee593b.zapier.app/');
      setLinkGenerated(true);
    }
  };

  const handleCopyLink = () => {
    navigator.clipboard.writeText(generatedLink);
    alert('Link copied to clipboard');
  };

  const toggleShareDrawer = () => {
    setShareDrawerOpen(!isShareDrawerOpen);
  };

  return (
    <section className="realtor-profile-header">
      <div className="profile-info">
        <div className="profile-image">
          <div className="circle-placeholder"></div>
        </div>
        <div className="profile-text">
          <h2>{user ? `${user.firstName} ${user.lastName}` : 'User Name'}</h2>
          <div className="badge">Top Realtor</div>
          <p>Welcome to your Realtor Dashboard</p>
        </div>
      </div>

      <div className="profile-actions">
        {linkGenerated ? (
          <div className="generated-link-box">
            <span className="generated-link">{generatedLink}</span>
            <button className="copy-link" onClick={handleCopyLink}>
              Copy Link
            </button>
            <button className="share-link" onClick={toggleShareDrawer}>
              Share
            </button>
          </div>
        ) : (
          <button className="generate-link" onClick={handleGenerateLink}>
            Generate Link
          </button>
        )}

        {isShareDrawerOpen && (
          <div className="share-drawer">
            <button className="share-option">Messages</button>
            <button className="share-option">WhatsApp</button>
            <button className="share-option">Email</button>
          </div>
        )}
      </div>
    </section>
  );
};

export default RealtorProfileHeader;
"


