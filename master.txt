backend:
package.json:
"
{
  "name": "ai-realtor-backend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "axios": "^1.7.7",
    "bcrypt": "^5.1.1",
    "connect-redis": "^7.1.1",
    "cors": "^2.8.5",
    "csurf": "^1.10.0",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "express-rate-limit": "^7.4.1",
    "express-session": "^1.18.1",
    "express-validator": "^7.2.0",
    "helmet": "^8.0.0",
    "passport": "^0.7.0",
    "passport-facebook": "^3.0.0",
    "passport-google-oauth20": "^2.0.0",
    "passport-instagram": "^1.0.0",
    "passport-local": "^1.0.0",
    "passport-microsoft": "^2.1.0",
    "pg": "^8.13.1",
    "redis": "^4.7.0"
  },
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "main": "server.js",
  "devDependencies": {
    "nodemon": "^2.0.15"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "Backend server for AI Realtor app"
}
"

server.js:
"
const express = require('express');
const axios = require('axios');
const session = require('express-session');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
require('dotenv').config();
const RedisStore = require('connect-redis').default;
const redis = require('redis');
const cors = require('cors');
const { body, validationResult } = require('express-validator');
const rateLimit = require('express-rate-limit');
const { Pool } = require('pg');
const helmet = require('helmet');
const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcrypt');

// Pick the URLs from the environment or default to localhost if dev
const isProd = (process.env.NODE_ENV === 'production');

const FRONTEND_URL = isProd
  ? process.env.FRONTEND_URL || 'https://realtoriq.onrender.com'
  : 'http://localhost:3000';

const BACKEND_URL = isProd
  ? process.env.BACKEND_URL || 'https://realtoriqbackend.onrender.com'
  : 'http://localhost:5000';

// Log environment info
console.log('Current NODE_ENV:', process.env.NODE_ENV);
console.log('Frontend URL:', FRONTEND_URL);
console.log('Backend URL:', BACKEND_URL);

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(helmet());
app.use(express.json());
app.set('trust proxy', 1); // trust first proxy

// Rate limit (basic example)
const limiter = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 100
});
app.use(limiter);

// Update CORS configuration
app.use(
  cors({
    origin: FRONTEND_URL,
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Accept', 'Origin', 'Authorization']
  })
);

// For any preflight requests on form route
app.options('/api/form/:realtorId', cors());

// Database Pool Configuration
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

pool.on('error', (err) => {
  console.error('Database connection error:', err);
  console.error('Using DATABASE_URL:', process.env.DATABASE_URL);
});

// Test database connection on startup
pool.query('SELECT NOW()', (err, res) => {
  if (err) {
    console.error('Error testing database connection:', err);
  } else {
    console.log('Database connected successfully at', res.rows[0].now);
  }
});

// Session config
const sessionConfig = {
  secret: process.env.SESSION_SECRET || 'someSecret',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: isProd,
    httpOnly: true,
    sameSite: isProd ? 'none' : 'lax',
    maxAge: 24 * 60 * 60 * 1000 // 24 hours
  },
  proxy: true
};

if (isProd && process.env.REDIS_URL) {
  const redisClient = redis.createClient({
    url: process.env.REDIS_URL
  });
  redisClient.connect().catch(console.error);
  redisClient.on('connect', () => console.log('Connected to Redis successfully.'));
  redisClient.on('error', (err) => console.error('Redis connection error:', err));

  // Use Redis store in production
  sessionConfig.store = new RedisStore({ client: redisClient });
}

app.use(session(sessionConfig));
app.use(passport.initialize());
app.use(passport.session());

// Database Helper Functions
async function findRealtorByGoogleId(googleId) {
  try {
    const result = await pool.query('SELECT * FROM realtors WHERE google_id = $1', [googleId]);
    return result.rows[0];
  } catch (error) {
    console.error('Error in findRealtorByGoogleId:', error);
    throw error;
  }
}

async function createRealtor(userData) {
  try {
    const { googleId, firstName, lastName, email, phoneNumber } = userData;
    const result = await pool.query(
      `INSERT INTO realtors 
         (google_id, first_name, last_name, email, phone_number, created_at, updated_at)
       VALUES 
         ($1, $2, $3, $4, $5, NOW(), NOW())
       RETURNING *`,
      [googleId, firstName, lastName, email, phoneNumber]
    );
    return result.rows[0];
  } catch (error) {
    console.error('Error in createRealtor:', error);
    throw error;
  }
}

async function findRealtorById(id) {
  const result = await pool.query('SELECT * FROM realtors WHERE id = $1', [id]);
  return result.rows[0];
}

// Passport Strategies
passport.use(
  new GoogleStrategy(
    {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackURL: `${BACKEND_URL}/auth/google/callback`,
    },
    async (accessToken, refreshToken, profile, done) => {
      try {
        console.log("Google profile:", profile);
        
        let realtor = await findRealtorByGoogleId(profile.id);
        if (!realtor) {
          realtor = await createRealtor({
            googleId: profile.id,
            firstName: profile.name.givenName,
            lastName: profile.name.familyName,
            email: profile.emails[0].value,
            phoneNumber: '',
          });
        }
        return done(null, realtor);
      } catch (err) {
        console.error("Google OAuth Error:", err);
        return done(err);
      }
    }
  )
);

passport.use(
  new LocalStrategy({ usernameField: 'email' }, async (email, password, done) => {
    try {
      const result = await pool.query('SELECT * FROM realtors WHERE email = $1', [email]);
      const realtor = result.rows[0];
      if (!realtor) {
        return done(null, false, { message: 'Incorrect email or password.' });
      }
      if (!realtor.password) {
        return done(null, false, { message: 'Please log in with Google.' });
      }
      const isValid = await bcrypt.compare(password, realtor.password);
      if (!isValid) {
        return done(null, false, { message: 'Incorrect email or password.' });
      }
      return done(null, realtor);
    } catch (error) {
      return done(error);
    }
  })
);

// Serialize / Deserialize
passport.serializeUser((user, done) => {
  done(null, user.id);
});

passport.deserializeUser(async (id, done) => {
  try {
    const result = await pool.query('SELECT * FROM realtors WHERE id = $1', [id]);
    const user = result.rows[0];
    if (user) {
      done(null, {
        id: user.id,
        firstName: user.first_name,
        lastName: user.last_name,
        email: user.email
      });
    } else {
      done(new Error('User not found'));
    }
  } catch (error) {
    done(error);
  }
});

// Authentication Routes
app.post(
  '/auth/register',
  [
    body('firstName').isString(),
    body('lastName').isString(),
    body('email').isEmail(),
    body('password').isLength({ min: 6 }),
    body('phoneNumber').optional().isMobilePhone()
  ],
  async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { firstName, lastName, email, password, phoneNumber } = req.body;

    try {
      // Check if email exists
      const existingUser = await pool.query('SELECT * FROM realtors WHERE email = $1', [email]);
      if (existingUser.rows.length > 0) {
        return res.status(400).json({ message: 'Email already in use.' });
      }

      // Hash password
      const hashedPassword = await bcrypt.hash(password, 10);

      // Create new realtor
      const result = await pool.query(
        `INSERT INTO realtors (first_name, last_name, email, password, phone_number)
         VALUES ($1, $2, $3, $4, $5) RETURNING *`,
        [firstName, lastName, email, hashedPassword, phoneNumber]
      );
      const newRealtor = result.rows[0];

      // Auto-login
      req.login(newRealtor, (err) => {
        if (err) return next(err);
        res.json({
          message: 'Registration successful',
          user: {
            id: newRealtor.id,
            email: newRealtor.email,
            firstName: newRealtor.first_name,
            lastName: newRealtor.last_name,
            displayName: `${newRealtor.first_name} ${newRealtor.last_name}`
          }
        });
      });
    } catch (error) {
      console.error('Registration error:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
);

app.post('/auth/login', [body('email').isEmail(), body('password').exists()],
  (req, res, next) => {
    passport.authenticate('local', (err, realtor, info) => {
      if (err) {
        console.error('Login error:', err);
        return next(err);
      }
      if (!realtor) {
        return res.status(401).json({ message: info.message });
      }
      req.logIn(realtor, (err) => {
        if (err) {
          console.error('Session error:', err);
          return next(err);
        }
        res.json({
          message: 'Login successful',
          user: {
            id: realtor.id,
            email: realtor.email,
            firstName: realtor.first_name,
            lastName: realtor.last_name,
            displayName: `${realtor.first_name} ${realtor.last_name}`
          }
        });
      });
    })(req, res, next);
  }
);

app.get(
  '/auth/google',
  passport.authenticate('google', {
    scope: ['profile', 'email']
  })
);

app.get(
  '/auth/google/callback',
  passport.authenticate('google', { failureRedirect: '/' }),
  (req, res) => {
    // Redirect to frontend after successful Google login
    res.redirect(`${FRONTEND_URL}/main`);
  }
);

app.get('/auth/status', (req, res) => {
  res.json({
    authenticated: req.isAuthenticated(),
    user: req.user
  });
});

app.get('/auth/user', (req, res) => {
  if (req.isAuthenticated() && req.user) {
    const userData = {
      user: {
        id: req.user.id,
        email: req.user.email,
        firstName: req.user.firstName,
        lastName: req.user.lastName,
        displayName: `${req.user.firstName} ${req.user.lastName}`
      }
    };
    res.json(userData);
  } else {
    res.status(401).json({ message: 'Unauthorized' });
  }
});

app.get('/auth/logout', (req, res) => {
  req.logout((err) => {
    if (err) {
      console.error('Logout error:', err);
      return res.status(500).json({ error: 'Failed to log out' });
    }
    req.session.destroy((err) => {
      if (err) {
        console.error('Session destruction error:', err);
        return res.status(500).json({ error: 'Failed to destroy session' });
      }
      res.json({ message: 'Logged out successfully' });
    });
  });
});

// Helper: check if user is authenticated
function ensureAuthenticated(req, res, next) {
  if (req.isAuthenticated()) return next();
  return res.status(401).json({ message: 'Unauthorized' });
}

// Client (Buyer/Seller) Form Endpoints
app.post('/api/form/:realtorId', async (req, res) => {
  const realtorId = req.params.realtorId;
  const {
    firstName,
    lastName,
    phone,
    email,
    clientType,
    budget,
    location,
    amenities,
    property_images,
    notes
  } = req.body;

  try {
    const insertQuery = `
      INSERT INTO clients
        (realtor_id, client_type, first_name, last_name, phone, email, budget, location, amenities, property_images, notes, created_at)
      VALUES
        ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NOW())
      RETURNING *
    `;

    const values = [
      realtorId,
      clientType,
      firstName,
      lastName,
      phone,
      email,
      budget || null,
      location || null,
      amenities || null,
      property_images || null,
      notes || null
    ];

    const result = await pool.query(insertQuery, values);
    return res.json({
      message: 'Form submitted successfully',
      client: result.rows[0]
    });
  } catch (error) {
    console.error('Error saving form data:', error);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Get all clients for a specific realtor
app.get('/api/clients', ensureAuthenticated, async (req, res) => {
  try {
    const query = `
      SELECT * FROM clients 
      WHERE realtor_id = $1 
      ORDER BY created_at DESC
    `;
    const { rows } = await pool.query(query, [req.user.id]);
    return res.json(rows);
  } catch (error) {
    console.error('Error fetching clients:', error);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Pin/Unpin a client
app.put('/api/clients/:clientId/pin', ensureAuthenticated, async (req, res) => {
  const { clientId } = req.params;
  const { pinned } = req.body; // boolean
  try {
    const query = `
      UPDATE clients
      SET pinned = $1, updated_at = NOW()
      WHERE id = $2 AND realtor_id = $3
      RETURNING *
    `;
    const values = [pinned, clientId, req.user.id];
    const { rows } = await pool.query(query, values);
    if (rows.length === 0) {
      return res.status(404).json({ error: 'Client not found or not authorized' });
    }
    return res.json(rows[0]);
  } catch (error) {
    console.error('Error updating pin status:', error);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Update settings
app.put(
  '/api/realtor/settings',
  ensureAuthenticated,
  [
    body('firstName').optional().isString(),
    body('lastName').optional().isString(),
    body('email').optional().isEmail(),
    body('phoneNumber').optional().isMobilePhone(),
    body('password').optional().isLength({ min: 6 })
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { firstName, lastName, email, phoneNumber, password } = req.body;

    try {
      const realtor = await findRealtorById(req.user.id);
      if (!realtor) return res.status(404).json({ error: 'User not found' });

      // If Google-based account has no local password, block local password changes
      let hashedPassword = null;
      if (realtor.google_id && realtor.password == null && password) {
        return res
          .status(400)
          .json({ error: 'Cannot update password for an OAuth-based account.' });
      }
      if (password && !realtor.google_id) {
        hashedPassword = await bcrypt.hash(password, 10);
      }

      const updateQuery = `
        UPDATE realtors
        SET
          first_name = COALESCE($1, first_name),
          last_name = COALESCE($2, last_name),
          email = COALESCE($3, email),
          phone_number = COALESCE($4, phone_number),
          password = COALESCE($5, password),
          updated_at = NOW()
        WHERE id = $6
        RETURNING *
      `;
      const values = [
        firstName || null,
        lastName || null,
        email || null,
        phoneNumber || null,
        hashedPassword || null,
        req.user.id
      ];

      const { rows } = await pool.query(updateQuery, values);
      const updatedRealtor = rows[0];

      return res.json({
        message: 'Settings updated',
        user: {
          id: updatedRealtor.id,
          email: updatedRealtor.email,
          firstName: updatedRealtor.first_name,
          lastName: updatedRealtor.last_name,
          phoneNumber: updatedRealtor.phone_number
        }
      });
    } catch (error) {
      console.error('Settings update error:', error);
      return res.status(500).json({ error: 'Internal Server Error' });
    }
  }
);

// Generate link example
app.post('/generate-link', ensureAuthenticated, async (req, res) => {
  const generatedLink = `${FRONTEND_URL}/form/${req.user.id}`;
  return res.json({ link: generatedLink });
});

app.get('/auth/check', (req, res) => {
  res.json({
    authenticated: req.isAuthenticated(),
    user: req.user,
    session: req.session
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
  console.log('Environment:', process.env.NODE_ENV);
});
"


frontend:
package.json:
"
{
  "name": "ai-realtor-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.7",
    "qrcode.react": "^4.2.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.28.0",
    "react-scripts": "^5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "@babel/plugin-transform-private-property-in-object": "^7.25.8"
  },
  "engines": {
    "node": "22.11.0"
  }
}
"


public:
manifest.json:
"
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
"


src:
App.jsx:
"
import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import axios from 'axios';

import HomeApp from './components/Home/HomeApp';
import RealtorApp from './components/Realtor/RealtorApp';
import MainPage from './components/MainPage/MainPage';
import SettingsPage from './components/Settings/SettingsPage';
import FormPage from './components/Form/FormPage';
import SignIn from './components/Auth/SignIn';
import SignUp from './components/Auth/SignUp';
import PrivateRoute from './components/Auth/PrivateRoute';

import './styles/Navbar.css';
import './styles/Realtor/global.css';
import './styles/darkmode.css';

function App() {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const response = await axios.get('/auth/status');
        if (response.data.authenticated) {
          setUser(response.data.user);
          // If user is already authenticated and hits /main, redirect to /realtor
          if (window.location.pathname === '/main') {
            window.location.replace('/realtor');
          }
        }
      } catch (error) {
        console.error('Auth check error:', error);
      } finally {
        setIsLoading(false);
      }
    };

    checkAuth();
  }, []);

  const handleLogout = async () => {
    try {
      await axios.get('/auth/logout');
      setUser(null);
      window.location.href = '/';
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <Router>
      <Routes>
        <Route path="/" element={<HomeApp user={user} onLogout={handleLogout} />} />
        
        {/* If user is logged in, /main -> /realtor, else /signin */}
        <Route 
          path="/main" 
          element={user ? <Navigate to="/realtor" /> : <Navigate to="/signin" />} 
        />

        <Route
          path="/realtor"
          element={
            <PrivateRoute user={user}>
              <RealtorApp user={user} onLogout={handleLogout} />
            </PrivateRoute>
          }
        />
        <Route 
          path="/signin" 
          element={user ? <Navigate to="/realtor" /> : <SignIn setUser={setUser} />} 
        />
        <Route 
          path="/signup" 
          element={user ? <Navigate to="/realtor" /> : <SignUp setUser={setUser} />} 
        />

        <Route
          path="/settings"
          element={
            <PrivateRoute user={user}>
              <SettingsPage user={user} setUser={setUser} />
            </PrivateRoute>
          }
        />

        {/* Public form page */}
        <Route path="/form/:realtorId" element={<FormPage />} />
      </Routes>
    </Router>
  );
}

export default App;
"

index.js:
"
import React from 'react';
import ReactDOM from 'react-dom';
import axios from 'axios';
import App from './App';

import './styles/Home/global.css';

const isProd = (process.env.REACT_APP_NODE_ENV === 'production');
const backendUrl = isProd
  ? process.env.REACT_APP_BACKEND_URL || 'https://realtoriqbackend.onrender.com'
  : 'http://localhost:5000';

// Set default axios configuration for the frontend
axios.defaults.baseURL = backendUrl;
axios.defaults.withCredentials = true;

console.log('React Environment:', process.env.REACT_APP_NODE_ENV);
console.log('Using Backend URL:', axios.defaults.baseURL);

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
"


components:
Navbar.jsx:
"
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import '../styles/Navbar.css';

const Navbar = ({ user, onLogout }) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  const getUserDisplayName = () => {
    if (user?.firstName && user?.lastName) {
      return `${user.firstName} ${user.lastName}`;
    }
    return user?.displayName || user?.email || 'User';
  };

  return (
    <nav className="navbar">
      <div className="navbar-content">
        <Link to="/" className="navbar-brand">
          AI Realtor
        </Link>
        <div className="nav-links">
          <Link to="/">Home</Link>
          <Link to="/buy">Buy</Link>
          <Link to="/realtor">Realtor</Link>
          {user ? (
            <div className="user-menu">
              <button 
                className="user-menu-button"
                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
              >
                <span className="user-name">{getUserDisplayName()}</span>
                <span className="dropdown-arrow">▼</span>
              </button>
              {isDropdownOpen && (
                <div className="user-dropdown">
                  <button onClick={onLogout}>Logout</button>
                </div>
              )}
            </div>
          ) : (
            <Link to="/signin">Sign In</Link>
          )}
        </div>
      </div>
    </nav>
  );
};

export default Navbar; 
"


Auth:
PrivateRoute.jsx:
"
import React from 'react';
import { Navigate } from 'react-router-dom';

const PrivateRoute = ({ user, children }) => {
  const isAuthenticated = !!user; // Check if user exists
  
  return isAuthenticated ? children : <Navigate to="/signin" />;
};

export default PrivateRoute;
"

SignIn.jsx:
"
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../../styles/Auth/Auth.css';

const SignIn = ({ setUser }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/auth/login', { email, password });
      setUser({
        id: response.data.user.id,
        email: response.data.user.email,
        firstName: response.data.user.firstName,
        lastName: response.data.user.lastName,
        displayName: response.data.user.displayName
      });
      navigate('/realtor');
    } catch (error) {
      console.error('Login error:', error.response?.data || error.message);
      alert(error.response?.data?.message || 'Login failed');
    }
  };

  const handleGoogleLogin = () => {
    // Use the environment variable
    const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';
    window.location.href = `${backendUrl}/auth/google`;
  };

  return (
    <div className="auth-container">
      <div className="auth-form">
        <h2>Sign In</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          <div className="form-group">
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>

          <button type="submit" className="auth-button">
            Sign In
          </button>
        </form>

        <div className="divider">or</div>

        <button onClick={handleGoogleLogin} className="google-button">
          Login with Google
        </button>

        <p className="auth-link">
          Don&apos;t have an account? <Link to="/signup">Sign Up</Link>
        </p>
      </div>
    </div>
  );
};

export default SignIn;
"

SignUp.jsx:
"
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../../styles/Auth/Auth.css';

const SignUp = ({ setUser }) => {
  const [firstName, setFirstName] = useState(''); // For 'firstName'
  const [lastName, setLastName] = useState(''); // For 'lastName'
  const [email, setEmail] = useState(''); // For 'email'
  const [password, setPassword] = useState(''); // For 'password'
  const [confirmPassword, setConfirmPassword] = useState(''); // For 'confirmPassword'
  const [phoneNumber, setPhoneNumber] = useState(''); // For 'phoneNumber'

  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Check if passwords match
    if (password !== confirmPassword) {
      alert('Passwords do not match.');
      return;
    }

    try {
      const response = await axios.post('/auth/register', {
        firstName,
        lastName,
        email,
        password,
        phoneNumber,
      });

      console.log('Registration successful:', response.data);

      setUser({
        id: response.data.user.id,
        email: response.data.user.email,
        firstName: response.data.user.firstName,
        lastName: response.data.user.lastName,
        displayName: response.data.user.displayName,
      });

      navigate('/realtor');
    } catch (error) {
      console.error('Registration error:', error.response?.data || error.message);
      alert(error.response?.data?.message || 'Registration failed');
    }
  };

  return (
    <div className="auth-container">
      <div className="auth-form">
        <h2>Sign Up</h2>
        <form onSubmit={handleSubmit}>
          {/* First Name */}
          <div className="form-group">
            <input
              type="text"
              placeholder="First Name"
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
              required
            />
          </div>

          {/* Last Name */}
          <div className="form-group">
            <input
              type="text"
              placeholder="Last Name"
              value={lastName}
              onChange={(e) => setLastName(e.target.value)}
              required
            />
          </div>

          {/* Phone Number */}
          <div className="form-group">
            <input
              type="tel"
              placeholder="Phone Number"
              value={phoneNumber}
              onChange={(e) => setPhoneNumber(e.target.value)}
            />
          </div>

          {/* Email */}
          <div className="form-group">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          {/* Password */}
          <div className="form-group">
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>

          {/* Confirm Password */}
          <div className="form-group">
            <input
              type="password"
              placeholder="Confirm Password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
            />
          </div>

          {/* Submit Button */}
          <button type="submit" className="auth-button">
            Register
          </button>
        </form>

        {/* Link to Sign In */}
        <p className="auth-link">
          Already have an account? <Link to="/signin">Sign In</Link>
        </p>
      </div>
    </div>
  );
};

export default SignUp;
"


Buy:
BuyApp.jsx:
"
"


Form:
FormPage.jsx:
"
import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import '../../styles/Form/FormPage.css';

function FormPage() {
  const { realtorId } = useParams();
  const [clientType, setClientType] = useState('buyer');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [phone, setPhone] = useState('');
  const [email, setEmail] = useState('');
  const [budget, setBudget] = useState('');
  const [location, setLocation] = useState('');
  const [amenities, setAmenities] = useState('');
  const [propertyImages, setPropertyImages] = useState([]);
  const [notes, setNotes] = useState('');
  const [submitted, setSubmitted] = useState(false);

  const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';
  const frontendUrl = process.env.REACT_APP_FRONTEND_URL || 'http://localhost:3000';

  const handleFormSubmit = async (e) => {
    e.preventDefault();
    try {
      if (!realtorId) {
        throw new Error('Realtor ID is missing');
      }

      const payload = {
        firstName,
        lastName,
        phone,
        email,
        clientType,
        budget: clientType === 'buyer' ? budget : null,
        location: clientType === 'buyer' ? location : null,
        amenities: clientType === 'buyer' ? amenities : null,
        property_images: clientType === 'seller' ? propertyImages : null,
        notes: clientType === 'seller' ? notes : null
      };

      const response = await fetch(`${backendUrl}/api/form/${realtorId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          // 'Origin' header is generally set automatically by the browser;
          // including it manually is optional, but if you do:
          // 'Origin': frontendUrl
        },
        mode: 'cors',
        body: JSON.stringify(payload)
      });

      if (response.ok) {
        await response.json();
        setSubmitted(true);
        alert('Form submitted successfully!');
      } else {
        const errorData = await response.json().catch(() => null);
        throw new Error(errorData?.message || 'Form submission failed');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error submitting form. Please try again.');
    }
  };

  const handleFileChange = async (e) => {
    const files = Array.from(e.target.files);
    const promises = files.map((file) => {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (ev) => resolve(ev.target.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
      });
    });
    const base64Images = await Promise.all(promises);
    setPropertyImages([...propertyImages, ...base64Images]);
  };

  if (submitted) {
    return (
      <div className="form-page-container dark-mode">
        <h2>Thank you!</h2>
        <p>Your information has been submitted.</p>
      </div>
    );
  }

  return (
    <div className="form-container">
      <h1>Contact Form</h1>
      {!realtorId && (
        <p style={{ color: 'red' }}>Warning: No realtor ID found!</p>
      )}
      <form onSubmit={handleFormSubmit} className="client-form">
        <div className="form-group">
          <label>First Name *</label>
          <input
            required
            value={firstName}
            onChange={(e) => setFirstName(e.target.value)}
            type="text"
          />
        </div>

        <div className="form-group">
          <label>Last Name *</label>
          <input
            required
            value={lastName}
            onChange={(e) => setLastName(e.target.value)}
            type="text"
          />
        </div>

        <div className="form-group">
          <label>Phone *</label>
          <input
            required
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            type="text"
          />
        </div>

        <div className="form-group">
          <label>Email *</label>
          <input
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            type="email"
          />
        </div>

        <div className="form-group">
          <label>Are you buying or selling?</label>
          <select value={clientType} onChange={(e) => setClientType(e.target.value)}>
            <option value="buyer">Buyer</option>
            <option value="seller">Seller</option>
          </select>
        </div>

        {clientType === 'buyer' && (
          <>
            <div className="form-group">
              <label>Budget</label>
              <input
                value={budget}
                onChange={(e) => setBudget(e.target.value)}
                type="number"
              />
            </div>

            <div className="form-group">
              <label>Location</label>
              <input
                value={location}
                onChange={(e) => setLocation(e.target.value)}
                type="text"
              />
            </div>

            <div className="form-group">
              <label>Amenities</label>
              <textarea
                value={amenities}
                onChange={(e) => setAmenities(e.target.value)}
              />
            </div>
          </>
        )}

        {clientType === 'seller' && (
          <>
            <div className="form-group">
              <label>Property Images</label>
              <input type="file" multiple onChange={handleFileChange} />
            </div>

            <div className="form-group">
              <label>Property Description / Notes</label>
              <textarea
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
              />
            </div>
          </>
        )}

        <button type="submit">Submit</button>
      </form>
    </div>
  );
}

export default FormPage;
"


Home:
AiChat.jsx:
"
import React from 'react';
import '../../styles/Home/AiChat.css';

const AiChat = () => {
  return (
    <section className="ai-chat">
      <div className="container">
        <h3>Talk to our AI Agent</h3>
        <button>Start Chat</button>
      </div>
    </section>
  );
};

export default AiChat;
"

FeaturedProperties.jsx:
"
import React, { useState, useEffect } from 'react';
import '../../styles/Home/FeaturedProperties.css';

const FeaturedProperties = () => {
  const properties = [
    {
      images: [
        process.env.PUBLIC_URL + '/images/image1.jpg',
        process.env.PUBLIC_URL + '/images/image2.jpg',
        process.env.PUBLIC_URL + '/images/image3.jpg'
      ],
      details: [
        { title: '3 Bedroom Modern House', price: '$800,000' },
        { title: '4 Bedroom Luxury Villa', price: '$1,200,000' },
        { title: '3 Bedroom Smart Home', price: '$950,000' },
      ]
    },
    {
      images: ['/images/image4.jpg', '/images/image5.jpg', '/images/image6.jpg'],
      details: [
        { title: '2 Bedroom Cottage', price: '$650,000' },
        { title: '2 Bedroom Condo', price: '$550,000' },
        { title: '2 Bedroom Townhouse', price: '$600,000' },
      ]
    },
    {
      images: ['/images/image7.jpg', '/images/image1.jpg', '/images/image2.jpg'],
      details: [
        { title: '5 Bedroom Estate', price: '$1,300,000' },
        { title: '4 Bedroom Manor', price: '$1,100,000' },
        { title: '5 Bedroom Mansion', price: '$1,500,000' },
      ]
    }
  ];

  // Separate state for each card
  const [firstCardIndex, setFirstCardIndex] = useState(0);
  const [secondCardIndex, setSecondCardIndex] = useState(0);
  const [thirdCardIndex, setThirdCardIndex] = useState(0);

  // Staggered intervals for each card
  useEffect(() => {
    // First card starts immediately and changes every 4 seconds
    const firstInterval = setInterval(() => {
      setFirstCardIndex(prev => (prev + 1) % 3);
    }, 4000);

    // Second card starts after 2 seconds delay
    const secondStart = setTimeout(() => {
      setSecondCardIndex(1); // Start with second image
      // Then continue every 4 seconds
      const secondInterval = setInterval(() => {
        setSecondCardIndex(prev => (prev + 1) % 3);
      }, 4000);
      
      return () => clearInterval(secondInterval);
    }, 2000);

    // Third card starts after 4 seconds delay
    const thirdStart = setTimeout(() => {
      setThirdCardIndex(2); // Start with third image
      // Then continue every 4 seconds
      const thirdInterval = setInterval(() => {
        setThirdCardIndex(prev => (prev + 1) % 3);
      }, 4000);
      
      return () => clearInterval(thirdInterval);
    }, 4000);

    return () => {
      clearInterval(firstInterval);
      clearTimeout(secondStart);
      clearTimeout(thirdStart);
    };
  }, []);

  return (
    <section className="featured-properties">
      <div className="containerProp">
        <h3>Featured Properties</h3>
        <div className="property-grid">
          <div className="property">
            <div className="property-image-container">
              {properties[0].images.map((img, imgIndex) => (
                <div
                  key={imgIndex}
                  className={`property-image ${imgIndex === firstCardIndex ? 'active' : ''}`}
                >
                  <img src={img} alt={`Property 1`} />
                </div>
              ))}
            </div>
            <div className="property-details">
              <p>{properties[0].details[firstCardIndex].title}</p>
              <p className="price">{properties[0].details[firstCardIndex].price}</p>
            </div>
          </div>

          <div className="property">
            <div className="property-image-container">
              {properties[1].images.map((img, imgIndex) => (
                <div
                  key={imgIndex}
                  className={`property-image ${imgIndex === secondCardIndex ? 'active' : ''}`}
                >
                  <img src={img} alt={`Property 2`} />
                </div>
              ))}
            </div>
            <div className="property-details">
              <p>{properties[1].details[secondCardIndex].title}</p>
              <p className="price">{properties[1].details[secondCardIndex].price}</p>
            </div>
          </div>

          <div className="property">
            <div className="property-image-container">
              {properties[2].images.map((img, imgIndex) => (
                <div
                  key={imgIndex}
                  className={`property-image ${imgIndex === thirdCardIndex ? 'active' : ''}`}
                >
                  <img src={img} alt={`Property 3`} />
                </div>
              ))}
            </div>
            <div className="property-details">
              <p>{properties[2].details[thirdCardIndex].title}</p>
              <p className="price">{properties[2].details[thirdCardIndex].price}</p>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default FeaturedProperties;
"

Footer.jsx:
"
import React from 'react';
import { Link } from 'react-router-dom';
import '../../styles/Home/Footer.css';

const Footer = () => {
  return (
    <footer className="footer">
      <div className="footer-content">
        {/* Company Section */}
        <div className="footer-section">
          <h3>Company</h3>
          <ul>
            <li><Link to="/about">About Us</Link></li>
            <li><Link to="/features">Features</Link></li>
            <li><Link to="/pricing">Pricing</Link></li>
          </ul>
        </div>

        {/* Support Section */}
        <div className="footer-section">
          <h3>Support</h3>
          <ul>
            <li><Link to="/contact">Contact Us</Link></li>
            <li><Link to="/faq">Faq</Link></li>
          </ul>
        </div>

        {/* Resources Section */}
        <div className="footer-section">
          <h3>Resources</h3>
          <ul>
            <li><Link to="/testimonials">Testimonials</Link></li>
            <li><Link to="/benefits">Benefits For Realtors</Link></li>
          </ul>
        </div>

        {/* Newsletter Section */}
        <div className="footer-section newsletter">
          <h3>Stay Updated</h3>
          <p>Subscribe to our newsletter for the latest updates and insights from RealtorIQ.</p>
          <div className="newsletter-form">
            <input type="email" placeholder="Enter your email" />
            <button type="submit">Subscribe</button>
          </div>
        </div>
      </div>

      {/* Bottom Bar */}
      <div className="footer-bottom">
        <p>© 2025 RealtorIQ. All rights reserved.</p>
        <div className="footer-links">
          <Link to="/terms">Terms & Conditions</Link>
          <Link to="/privacy">Privacy Policy</Link>
        </div>
        <div className="social-links">
          <a href="https://facebook.com" target="_blank" rel="noopener noreferrer">
            <i className="fab fa-facebook"></i>
          </a>
          <a href="https://linkedin.com" target="_blank" rel="noopener noreferrer">
            <i className="fab fa-linkedin"></i>
          </a>
          <a href="https://twitter.com" target="_blank" rel="noopener noreferrer">
            <i className="fab fa-twitter"></i>
          </a>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
"

Header.jsx:
"
import React, { useState, useRef, useEffect } from 'react';
import { Link } from 'react-router-dom';
import '../../styles/Home/Header.css';

const Header = ({ user, onLogout }) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  useEffect(() => {
    console.log('Header received user:', user);
    console.log('User display name:', user?.displayName);
    console.log('User name:', user?.name);
  }, [user]);

  return (
    <header className="containerHeader">
      <h1>AI Realtor</h1>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          <li><Link to="/buy">Buy</Link></li>
          <li><Link to="/realtor">Realtor</Link></li>
          {user ? (
            <li className="user-menu" ref={dropdownRef}>
              <button
                className="user-menu-button"
                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
              >
                {user.firstName && user.lastName
                  ? `${user.firstName} ${user.lastName}`
                  : user.displayName || 'Welcome User'} ▼
              </button>
              {isDropdownOpen && (
                <div className="user-dropdown">
                  <button onClick={() => {
                    onLogout();
                    setIsDropdownOpen(false);
                  }}>Logout</button>
                </div>
              )}
            </li>
          ) : (
            <li><Link to="/signin" className="sign-in-link">Sign In</Link></li>
          )}
        </ul>
      </nav>
    </header>
  );
};

export default Header;
"

Hero.jsx:
"
import React from 'react';
import '../../styles/Home/Hero.css';

const Hero = () => {
  return (
    <section className="hero">
      <div className="containerHero">
        <h2>Welcome to AI Realtor</h2>
        <p>Finding your dream home by pairing a realtor with AI</p>
        <form action="#">
          <input type="text" placeholder="Search by city, address, or postal code" />
          <button type="submit">Get Started</button>
        </form>
      </div>
    </section>
  );
};

export default Hero;
"

HomeApp.jsx:
"
import React from 'react';
import Navbar from '../Navbar';
import Hero from './Hero';
import FeaturedProperties from './FeaturedProperties';
import Services from './Services';
import AiChat from './AiChat';
import RealEstateTrends from './RealEstateTrends';
// Removed ContactUs import temporarily

const HomeApp = () => {
  return (
    <div>
      <Navbar />
      <Hero />
      <FeaturedProperties />
      <Services />
      <AiChat />
      <RealEstateTrends />
      {/* Removed ContactUs component temporarily */}
    </div>
  );
};

export default HomeApp;
"

RealEstateTrends.jsx:
"
import React, { useState } from 'react';
import '../../styles/Home/RealEstateTrends.css';

const RealEstateTrends = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  
  const images = [
    '/images/trends.jpg',
    '/images/trends2.jpg',
    '/images/trends3.jpg'
  ];

  const handlePrev = () => {
    setCurrentIndex((prevIndex) => (prevIndex === 0 ? images.length - 1 : prevIndex - 1));
  };

  const handleNext = () => {
    setCurrentIndex((prevIndex) => (prevIndex === images.length - 1 ? 0 : prevIndex + 1));
  };

  return (
    <section className="real-estate-trends">
      <div className="container">
        <h3>Real Estate Trends</h3>
        <div className="trends-carousel">
          <button className="carousel-control prev" onClick={handlePrev}>❮</button>
          <div className="carousel-slide active">
            <img src={images[currentIndex]} alt={`Real Estate Trend ${currentIndex + 1}`} />
          </div>
          <button className="carousel-control next" onClick={handleNext}>❯</button>
        </div>
      </div>
    </section>
  );
};

export default RealEstateTrends;
"

Services.jsx:
"
import React from 'react';
import '../../styles/Home/Services.css';

const Services = () => {
  return (
    <section className="services-section">
      <div className="services-container">
        <h2 className="services-heading">Our Services</h2>
        <div className="services-grid">
          <div className="service-card">
            <div className="service-image-container">
              <img src={process.env.PUBLIC_URL + "/images/propertyvaluation.png"} alt="Property Valuation" />
            </div>
            <div className="service-details">
              <p>Property Valuation</p>
              <p className="description">Accurate property values using advanced machine learning algorithms.</p>
            </div>
          </div>

          <div className="service-card">
            <div className="service-image-container">
              <img src={process.env.PUBLIC_URL + "/images/markettrends.jpg"} alt="Market Insights" />
            </div>
            <div className="service-details">
              <p>Market Insights</p>
              <p className="description">Get informed with real-time market trends and predictions.</p>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Services;
"


MainPage:
MainPage.jsx:
"
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import RealtorApp from '../Realtor/RealtorApp';
import '../../styles/MainPage/MainPage.css';

function MainPage({ user, onLogout }) {
  const navigate = useNavigate();

  useEffect(() => {
    if (user) {
      navigate('/realtor');
    }
  }, [user, navigate]);

  return <RealtorApp user={user} onLogout={onLogout} />;
}

export default MainPage;
"


Realtor:
AiChat.jsx:
"
import React, { useState, useEffect, useRef } from 'react';
import '../../styles/Realtor/AiChat.css';

const AiChat = () => {
  const [showChat, setShowChat] = useState(false);
  const landbotInstanceRef = useRef(null);

  useEffect(() => {
    if (!landbotInstanceRef.current && showChat) {
      const loadLandbot = () => {
        try {
          landbotInstanceRef.current = new window.Landbot.Container({
            container: '#myLandbot',
            configUrl: 'https://storage.googleapis.com/landbot.online/v3/H-2677681-SQEQ6FI3JEY1LKYE/index.json',
          });
        } catch (error) {
          console.error('Error initializing Landbot:', error);
        }
      };

      if (window.Landbot) {
        loadLandbot();
      } else {
        const script = document.createElement('script');
        script.src = 'https://cdn.landbot.io/landbot-3/landbot-3.0.0.js';
        script.async = true;
        script.onload = loadLandbot;
        document.body.appendChild(script);
      }
    }
  }, [showChat]);

  const handleClose = () => {
    try {
      // Simply remove the container's content and reset the ref
      const container = document.getElementById('myLandbot');
      if (container) {
        container.innerHTML = '';
      }
      landbotInstanceRef.current = null;
      setShowChat(false);
    } catch (error) {
      console.error('Error closing chat:', error);
      // Ensure the state is updated even if there's an error
      setShowChat(false);
    }
  };

  return (
    <section className={`ai-chat-section ${showChat ? 'expanded' : ''}`}>
      {showChat && (
        <button 
          className="close-chat-button" 
          onClick={handleClose}
          aria-label="Close chat"
        >
          ×
        </button>
      )}
      {!showChat ? (
        <div className="ai-chat-initial">
          <h3>Talk to our AI Agent</h3>
          <button onClick={() => setShowChat(true)}>Start Chat</button>
        </div>
      ) : (
        <div id="myLandbot" className="landbot-container"></div>
      )}
    </section>
  );
};

export default AiChat;
"

Carousel.jsx:
"
import React, { useState } from 'react';
import '../../styles/Realtor/Carousel.css';

const Carousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);

  // Sample images or infographics for the carousel
  const images = [
    { src: 'infographic1.jpg', alt: 'Infographic 1' },
    { src: 'infographic2.jpg', alt: 'Infographic 2' },
    { src: 'infographic3.jpg', alt: 'Infographic 3' },
  ];

  const handlePrev = () => {
    setCurrentIndex((prevIndex) => (prevIndex === 0 ? images.length - 1 : prevIndex - 1));
  };

  const handleNext = () => {
    setCurrentIndex((prevIndex) => (prevIndex === images.length - 1 ? 0 : prevIndex + 1));
  };

  return (
    <div className="carousel">
      <button className="carousel-control prev" onClick={handlePrev}>
        ❮
      </button>
      <div className="carousel-slide">
        <img src={images[currentIndex].src} alt={images[currentIndex].alt} />
      </div>
      <button className="carousel-control next" onClick={handleNext}>
        ❯
      </button>
    </div>
  );
};

export default Carousel;
"

ClientCard.jsx:
"
import React from 'react';
import '../../styles/Realtor/ClientCard.css';

const ClientCard = ({ client, onSelect, onPinToggle }) => {
  return (
    <div className="client-card">
      <div className="client-header">
        <strong>
          {client.first_name} {client.last_name}
        </strong>
        <button
          className="pin-button"
          onClick={() => onPinToggle(client.id, client.pinned)}
        >
          {client.pinned ? 'Unpin' : 'Pin'}
        </button>
      </div>
      <div onClick={() => onSelect(client)} className="client-body">
        <p>{client.client_type === 'seller' ? 'Seller' : 'Buyer'}</p>
        <p>Created: {new Date(client.created_at).toLocaleString()}</p>
      </div>
    </div>
  );
};

export default ClientCard; 
"

ClientDetails.jsx:
"
import React from 'react';
import '../../styles/Realtor/ClientDetails.css';

const ClientDetails = ({ client, onClose }) => {
  return (
    <div className="client-detail">
      <h4>
        {client.first_name} {client.last_name} ({client.client_type})
      </h4>
      <p>Phone: {client.phone}</p>
      <p>Email: {client.email}</p>
      {client.client_type === 'seller' && (
        <>
          <p>Notes: {client.notes}</p>
          {client.property_images && client.property_images.length > 0 && (
            <div className="property-images">
              {client.property_images.map((url, idx) => (
                <img src={url} alt={`property-${idx}`} key={idx} />
              ))}
            </div>
          )}
        </>
      )}
      {client.client_type === 'buyer' && (
        <>
          <p>Budget: {client.budget}</p>
          <p>Location: {client.location}</p>
          <p>Amenities: {client.amenities}</p>
        </>
      )}
      <button onClick={onClose}>Close</button>
    </div>
  );
};

export default ClientDetails; 
"

FormLinkGenerator.jsx:
"
import React, { useState } from 'react';
import { QRCodeSVG } from 'qrcode.react';
import '../../styles/Realtor/FormLinkGenerator.css';

const FormLinkGenerator = ({ user }) => {
  const [linkGenerated, setLinkGenerated] = useState(false);
  const [isShareDrawerOpen, setShareDrawerOpen] = useState(false);
  const formLink = `${window.location.origin}/form/${user?.id}`;

  const handleGenerateLink = () => {
    setLinkGenerated(true);
  };

  const handleCopyLink = () => {
    navigator.clipboard.writeText(formLink);
    alert('Link copied to clipboard');
  };

  const toggleShareDrawer = () => {
    setShareDrawerOpen(!isShareDrawerOpen);
  };

  return (
    <div className="form-link-generator">
      {!linkGenerated ? (
        <button className="generate-link-btn" onClick={handleGenerateLink}>
          Generate Client Form Link
        </button>
      ) : (
        <div className="generated-link-content">
          <div className="link-qr-container">
            <div className="link-section">
              <h3>Share Your Client Form</h3>
              <div className="link-display">
                <input type="text" value={formLink} readOnly />
                <div className="link-actions">
                  <button className="copy-btn" onClick={handleCopyLink}>
                    Copy Link
                  </button>
                  <button className="share-btn" onClick={toggleShareDrawer}>
                    Share
                  </button>
                </div>
              </div>
            </div>
            <div className="qr-section">
              <QRCodeSVG value={formLink} size={128} />
              <p>Scan QR Code</p>
            </div>
          </div>

          {isShareDrawerOpen && (
            <div className="share-drawer">
              <button className="share-option">
                <i className="fas fa-comment"></i>
                Messages
              </button>
              <button className="share-option">
                <i className="fab fa-whatsapp"></i>
                WhatsApp
              </button>
              <button className="share-option">
                <i className="fas fa-envelope"></i>
                Email
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default FormLinkGenerator; 
"

GeneratedLeads.jsx:
"
import React, { useState, useEffect } from 'react';
import '../../styles/Realtor/GeneratedLeads.css';

const GeneratedLeads = () => {
  const [leads, setLeads] = useState({
    sellers: [],
    buyers: []
  });

  const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';

  const getLeads = async () => {
    try {
      const response = await fetch(`${backendUrl}/api/clients`, {
        credentials: 'include',
        headers: {
          Accept: 'application/json'
        }
      });

      if (response.ok) {
        const clients = await response.json();
        // Group clients by type
        setLeads({
          sellers: clients.filter((client) => client.client_type === 'seller'),
          buyers: clients.filter((client) => client.client_type === 'buyer')
        });
      } else {
        console.error('Failed to fetch leads:', await response.text());
      }
    } catch (error) {
      console.error('Error fetching leads:', error);
    }
  };

  useEffect(() => {
    getLeads();
    // Optionally fetch every 30 seconds
    const intervalId = setInterval(getLeads, 30000);
    return () => clearInterval(intervalId);
  }, []);

  const LeadCard = ({ client }) => (
    <div className="lead-card">
      <div className="lead-header">
        <h4>
          {client.first_name} {client.last_name}
        </h4>
        <div className="lead-contact">
          <p>
            <i className="fas fa-phone"></i> {client.phone}
          </p>
          <p>
            <i className="fas fa-envelope"></i> {client.email}
          </p>
        </div>
      </div>
      <div className="lead-details">
        {client.client_type === 'buyer' ? (
          <>
            <p>
              <strong>Budget:</strong> ${client.budget}
            </p>
            <p>
              <strong>Location:</strong> {client.location}
            </p>
            <p>
              <strong>Amenities:</strong> {client.amenities}
            </p>
          </>
        ) : (
          <>
            <p>
              <strong>Notes:</strong> {client.notes}
            </p>
            {client.property_images && (
              <div className="property-images">
                {client.property_images.map((url, idx) => (
                  <img key={idx} src={url} alt={`Property ${idx + 1}`} />
                ))}
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );

  return (
    <section className="generated-leads">
      <div className="leads-header">
        <h2>Client Leads</h2>
        <p>All your client inquiries in one place</p>
      </div>

      <div className="leads-grid">
        <div className="leads-column">
          <div className="leads-section-header">
            <h3>Seller Clients</h3>
            <span className="lead-count">{leads.sellers.length} clients</span>
          </div>
          <div className="leads-list">
            {leads.sellers.length > 0 ? (
              leads.sellers.map((client) => <LeadCard key={client.id} client={client} />)
            ) : (
              <div className="no-leads">No seller clients yet</div>
            )}
          </div>
        </div>

        <div className="leads-column">
          <div className="leads-section-header">
            <h3>Buyer Clients</h3>
            <span className="lead-count">{leads.buyers.length} clients</span>
          </div>
          <div className="leads-list">
            {leads.buyers.length > 0 ? (
              leads.buyers.map((client) => <LeadCard key={client.id} client={client} />)
            ) : (
              <div className="no-leads">No buyer clients yet</div>
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

export default GeneratedLeads;
"

Header.jsx:
"
import React, { useState, useRef, useEffect } from 'react';
import { Link } from 'react-router-dom';
import '../../styles/Home/Header.css';

const Header = ({ user, onLogout }) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef(null);

  useEffect(() => {
    // Close dropdown when clicking outside
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <header className="containerHeader">
      <h1>AI Realtor</h1>
      <nav>
        <ul>
          <li>
            <Link to="/">Home</Link>
          </li>
          <li>
            <Link to="/buy">Buy</Link>
          </li>
          <li>
            <Link to="/realtor">Realtor</Link>
          </li>
          {user ? (
            // If user is logged in
            <>
              <li className="user-menu" ref={dropdownRef}>
                <button
                  className="user-menu-button"
                  onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                >
                  {user.firstName && user.lastName
                    ? `${user.firstName} ${user.lastName}`
                    : user.displayName || 'Welcome User'}{' '}
                  ▼
                </button>
                {isDropdownOpen && (
                  <div className="user-dropdown">
                    <button
                      onClick={() => {
                        onLogout();
                        setIsDropdownOpen(false);
                      }}
                    >
                      Logout
                    </button>
                  </div>
                )}
              </li>
            </>
          ) : (
            // If user is not logged in
            <>
              <li>
                <Link to="/signin" className="sign-in-link">
                  Sign In
                </Link>
              </li>
              <li>
                <Link to="/signup" className="sign-up-link">
                  Sign Up
                </Link>
              </li>
            </>
          )}
        </ul>
      </nav>
    </header>
  );
};

export default Header;
"

PerformanceOverview.jsx:
"
import React from 'react';
import '../../styles/Realtor/PerformanceOverview.css';

const PerformanceOverview = () => {
  return (
    <section className="performance-overview">
      <h2>Performance Overview</h2>
      <p>Check your selling metrics at a glance</p>
      <button className="view-details">View Details</button>

      <div className="stats">
        <div className="stat-box">
          <span className="stat-title">Total Properties Listed</span>
          <span className="stat-value">30</span>
        </div>
        <div className="stat-box">
          <span className="stat-title">Properties Sold</span>
          <span className="stat-value">15</span>
        </div>
        <div className="stat-box">
          <span className="stat-title">Average Selling Price</span>
          <span className="stat-value">$250,000</span>
        </div>
      </div>

      <div className="sales-trends">
        <h3>Sales Trends</h3>
        <div className="sales-chart">
          {/* Placeholder for the sales chart */}
        </div>
      </div>
    </section>
  );
};

export default PerformanceOverview;
"

RealtorApp.jsx:
"
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Navbar from '../Navbar';
import ClientCard from './ClientCard';
import ClientDetails from './ClientDetails';
import FormLinkGenerator from './FormLinkGenerator';
import PerformanceOverview from './PerformanceOverview';
import GeneratedLeads from './GeneratedLeads';
import RealtorProfileHeader from './RealtorProfileHeader';
import Footer from '../Home/Footer';
import Carousel from './Carousel';
import AiChat from './AiChat';
import '../../styles/Realtor/RealtorApp.css';

function RealtorApp({ user, onLogout }) {
  const [clients, setClients] = useState([]);
  const [selectedClient, setSelectedClient] = useState(null);
  const [generatedLink, setGeneratedLink] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (!user) {
      navigate('/signin');
      return;
    }
    fetchClients();
    setGeneratedLink(`${window.location.origin}/form/${user.id}`);
  }, [user, navigate]);

  const fetchClients = async () => {
    try {
      const res = await axios.get('/api/clients');
      setClients(res.data);
    } catch (err) {
      console.error('Error fetching clients:', err);
    }
  };

  const handlePinToggle = async (clientId, pinned) => {
    try {
      await axios.put(`/api/clients/${clientId}/pin`, { pinned: !pinned });
      fetchClients();
    } catch (err) {
      console.error('Error pinning/unpinning client:', err);
    }
  };

  const handleGenerateLink = async () => {
    try {
      const res = await axios.post('/generate-link');
      if (res.data && res.data.link) {
        setGeneratedLink(res.data.link);
      }
    } catch (error) {
      console.error('Error generating link:', error);
    }
  };

  return (
    <div className="realtor-app-container dark-mode">
      <Navbar 
        user={user} 
        onLogout={onLogout}
      />
      
      <div className="dashboard-content">
        <RealtorProfileHeader user={user} />

        <div className="client-form-section">
          <h2>Your Client Form</h2>
          <p>Share this link or QR code with your clients</p>
          <FormLinkGenerator 
            generatedLink={generatedLink}
            onGenerateLink={handleGenerateLink}
          />
        </div>

        <div className="clients-section">
          <h3>Clients</h3>
          <div className="clients-grid">
            {clients.map((client) => (
              <ClientCard
                key={client.id}
                client={client}
                onSelect={setSelectedClient}
                onPinToggle={handlePinToggle}
              />
            ))}
          </div>

          {selectedClient && (
            <ClientDetails 
              client={selectedClient}
              onClose={() => setSelectedClient(null)}
            />
          )}
        </div>

        <PerformanceOverview />
        <GeneratedLeads />
        <div className="ai-chat-container">
          <AiChat />
        </div>
        <Carousel />
      </div>
      <Footer />
    </div>
  );
}

export default RealtorApp;
"

RealtorProfileHeader.jsx:
"
import React from 'react';
import '../../styles/Realtor/RealtorProfileHeader.css';

const RealtorProfileHeader = ({ user }) => {
  return (
    <section className="realtor-profile-header">
      <div className="profile-info">
        <div className="profile-image">
          <div className="circle-placeholder"></div>
        </div>
        <div className="profile-text">
          <h2>{user ? `${user.firstName} ${user.lastName}` : 'User Name'}</h2>
          <div className="badge">Top Realtor</div>
          <p>Welcome to your Realtor Dashboard</p>
        </div>
      </div>
    </section>
  );
};

export default RealtorProfileHeader;
"


Settings:
SettingsPage.jsx:
"
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../../styles/Realtor/global.css';
import '../../styles/Settings/SettingsPage.css';

function SettingsPage({ user, setUser }) {
  const [firstName, setFirstName] = useState(user?.firstName || '');
  const [lastName, setLastName] = useState(user?.lastName || '');
  const [email, setEmail] = useState(user?.email || '');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [password, setPassword] = useState('');

  // fetch the latest user data in case it changed
  useEffect(() => {
    setFirstName(user?.firstName || '');
    setLastName(user?.lastName || '');
    setEmail(user?.email || '');
    setPhoneNumber(user?.phoneNumber || '');
  }, [user]);

  const handleSave = async () => {
    try {
      const response = await axios.put('/api/realtor/settings', {
        firstName,
        lastName,
        email,
        phoneNumber,
        password: password.trim() === '' ? undefined : password,
      });
      console.log('Settings updated:', response.data);
      // update front end user
      if (response.data.user) {
        setUser((prev) => ({
          ...prev,
          ...response.data.user
        }));
        alert('Settings saved!');
      }
    } catch (error) {
      console.error('Error updating settings:', error.response?.data || error.message);
      alert(error.response?.data?.error || 'Failed to update settings');
    }
  };

  return (
    <div className="settings-page dark-mode">
      <h2>Settings</h2>
      <div className="settings-form">
        <label>First Name</label>
        <input
          value={firstName}
          onChange={(e) => setFirstName(e.target.value)}
          type="text"
        />

        <label>Last Name</label>
        <input value={lastName} onChange={(e) => setLastName(e.target.value)} type="text" />

        <label>Email</label>
        <input value={email} onChange={(e) => setEmail(e.target.value)} type="email" />

        <label>Phone Number</label>
        <input
          value={phoneNumber}
          onChange={(e) => setPhoneNumber(e.target.value)}
          type="text"
        />

        {/* If user was created via Google OAuth, the backend won't allow password changes. */}
        <label>Password (Only for local accounts)</label>
        <input
          placeholder="Enter new password (optional)"
          onChange={(e) => setPassword(e.target.value)}
          type="password"
        />

        <button onClick={handleSave} className="save-button">
          Save
        </button>
      </div>
    </div>
  );
}

export default SettingsPage;
"


