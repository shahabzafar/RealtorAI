backend:
package.json:
"
{
  "name": "ai-realtor-backend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "axios": "^1.7.7",
    "bcrypt": "^5.1.1",
    "connect-redis": "^7.1.1",
    "cors": "^2.8.5",
    "csurf": "^1.10.0",
    "csv-parse": "^5.6.0",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "express-rate-limit": "^7.4.1",
    "express-session": "^1.18.1",
    "express-validator": "^7.2.0",
    "helmet": "^8.0.0",
    "multer": "^1.4.5-lts.1",
    "passport": "^0.7.0",
    "passport-facebook": "^3.0.0",
    "passport-google-oauth20": "^2.0.0",
    "passport-instagram": "^1.0.0",
    "passport-local": "^1.0.0",
    "passport-microsoft": "^2.1.0",
    "pg": "^8.13.1",
    "redis": "^4.7.0"
  },
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "main": "server.js",
  "devDependencies": {
    "nodemon": "^2.0.15"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "Backend server for AI Realtor app"
}
"

server.js:
"
const express = require('express');
const axios = require('axios');
const session = require('express-session');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
require('dotenv').config();
const RedisStore = require('connect-redis').default;
const redis = require('redis');
const cors = require('cors');
const { body, validationResult } = require('express-validator');
const rateLimit = require('express-rate-limit');
const { Pool } = require('pg');
const helmet = require('helmet');
const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcrypt');
const multer = require('multer');
const csvParser = require('csv-parse');
const stream = require('stream');

// Pick the URLs from the environment or default to localhost if dev
const isProd = (process.env.NODE_ENV === 'production');

const FRONTEND_URL = isProd
  ? process.env.FRONTEND_URL || 'https://realtoriq.onrender.com'
  : 'http://localhost:3000';

const BACKEND_URL = isProd
  ? process.env.BACKEND_URL || 'https://realtoriqbackend.onrender.com'
  : 'http://localhost:5000';

// Log environment info
console.log('Current NODE_ENV:', process.env.NODE_ENV);
console.log('Frontend URL:', FRONTEND_URL);
console.log('Backend URL:', BACKEND_URL);

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(helmet());
app.use(express.json());
app.set('trust proxy', 1); // trust first proxy

// Rate limit (basic example)
const limiter = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 100
});
app.use(limiter);

// Update CORS configuration
app.use(
  cors({
    origin: FRONTEND_URL,
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Accept', 'Origin', 'Authorization']
  })
);

// For any preflight requests on form route
app.options('/api/form/:realtorId', cors());

// Database Pool Configuration
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

pool.on('error', (err) => {
  console.error('Database connection error:', err);
  console.error('Using DATABASE_URL:', process.env.DATABASE_URL);
});

// Test database connection on startup
pool.query('SELECT NOW()', (err, res) => {
  if (err) {
    console.error('Error testing database connection:', err);
  } else {
    console.log('Database connected successfully at', res.rows[0].now);
  }
});

// Session config
const sessionConfig = {
  secret: process.env.SESSION_SECRET || 'someSecret',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: isProd,
    httpOnly: true,
    sameSite: isProd ? 'none' : 'lax',
    maxAge: 24 * 60 * 60 * 1000 // 24 hours
  },
  proxy: true
};

if (isProd && process.env.REDIS_URL) {
  const redisClient = redis.createClient({
    url: process.env.REDIS_URL
  });
  redisClient.connect().catch(console.error);
  redisClient.on('connect', () => console.log('Connected to Redis successfully.'));
  redisClient.on('error', (err) => console.error('Redis connection error:', err));

  // Use Redis store in production
  sessionConfig.store = new RedisStore({ client: redisClient });
}

app.use(session(sessionConfig));
app.use(passport.initialize());
app.use(passport.session());

// Database Helper Functions
async function findRealtorByGoogleId(googleId) {
  try {
    const result = await pool.query('SELECT * FROM realtors WHERE google_id = $1', [googleId]);
    return result.rows[0];
  } catch (error) {
    console.error('Error in findRealtorByGoogleId:', error);
    throw error;
  }
}

async function createRealtor(userData) {
  try {
    const { googleId, firstName, lastName, email, phoneNumber } = userData;
    const result = await pool.query(
      `INSERT INTO realtors 
         (google_id, first_name, last_name, email, phone_number, created_at, updated_at)
       VALUES 
         ($1, $2, $3, $4, $5, NOW(), NOW())
       RETURNING *`,
      [googleId, firstName, lastName, email, phoneNumber]
    );
    return result.rows[0];
  } catch (error) {
    console.error('Error in createRealtor:', error);
    throw error;
  }
}

async function findRealtorById(id) {
  const result = await pool.query('SELECT * FROM realtors WHERE id = $1', [id]);
  return result.rows[0];
}

// Passport Strategies
passport.use(
  new GoogleStrategy(
    {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackURL: `${BACKEND_URL}/auth/google/callback`,
    },
    async (accessToken, refreshToken, profile, done) => {
      try {
        console.log("Google profile:", profile);
        
        let realtor = await findRealtorByGoogleId(profile.id);
        if (!realtor) {
          realtor = await createRealtor({
            googleId: profile.id,
            firstName: profile.name.givenName,
            lastName: profile.name.familyName,
            email: profile.emails[0].value,
            phoneNumber: '',
          });
        }
        return done(null, realtor);
      } catch (err) {
        console.error("Google OAuth Error:", err);
        return done(err);
      }
    }
  )
);

passport.use(
  new LocalStrategy({ usernameField: 'email' }, async (email, password, done) => {
    try {
      const result = await pool.query('SELECT * FROM realtors WHERE email = $1', [email]);
      const realtor = result.rows[0];
      if (!realtor) {
        return done(null, false, { message: 'Incorrect email or password.' });
      }
      if (!realtor.password) {
        return done(null, false, { message: 'Please log in with Google.' });
      }
      const isValid = await bcrypt.compare(password, realtor.password);
      if (!isValid) {
        return done(null, false, { message: 'Incorrect email or password.' });
      }
      return done(null, realtor);
    } catch (error) {
      return done(error);
    }
  })
);

// Serialize / Deserialize
passport.serializeUser((user, done) => {
  done(null, user.id);
});

passport.deserializeUser(async (id, done) => {
  try {
    const result = await pool.query('SELECT * FROM realtors WHERE id = $1', [id]);
    const user = result.rows[0];
    if (user) {
      done(null, {
        id: user.id,
        firstName: user.first_name,
        lastName: user.last_name,
        email: user.email
      });
    } else {
      done(new Error('User not found'));
    }
  } catch (error) {
    done(error);
  }
});

// Authentication Routes
app.post(
  '/auth/register',
  [
    body('firstName').isString(),
    body('lastName').isString(),
    body('email').isEmail(),
    body('password').isLength({ min: 6 }),
    body('phoneNumber').optional().isMobilePhone()
  ],
  async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { firstName, lastName, email, password, phoneNumber } = req.body;

    try {
      // Check if email exists
      const existingUser = await pool.query('SELECT * FROM realtors WHERE email = $1', [email]);
      if (existingUser.rows.length > 0) {
        return res.status(400).json({ message: 'Email already in use.' });
      }

      // Hash password
      const hashedPassword = await bcrypt.hash(password, 10);

      // Create new realtor
      const result = await pool.query(
        `INSERT INTO realtors (first_name, last_name, email, password, phone_number, created_at, updated_at)
         VALUES ($1, $2, $3, $4, $5, NOW(), NOW()) RETURNING *`,
        [firstName, lastName, email, hashedPassword, phoneNumber]
      );
      const newRealtor = result.rows[0];

      // Auto-login
      req.login(newRealtor, (err) => {
        if (err) return next(err);
        res.json({
          message: 'Registration successful',
          user: {
            id: newRealtor.id,
            email: newRealtor.email,
            firstName: newRealtor.first_name,
            lastName: newRealtor.last_name,
            displayName: `${newRealtor.first_name} ${newRealtor.last_name}`
          }
        });
      });
    } catch (error) {
      console.error('Registration error:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
);

app.post('/auth/login', [body('email').isEmail(), body('password').exists()],
  (req, res, next) => {
    passport.authenticate('local', (err, realtor, info) => {
      if (err) {
        console.error('Login error:', err);
        return next(err);
      }
      if (!realtor) {
        return res.status(401).json({ message: info.message });
      }
      req.logIn(realtor, (err) => {
        if (err) {
          console.error('Session error:', err);
          return next(err);
        }
        res.json({
          message: 'Login successful',
          user: {
            id: realtor.id,
            email: realtor.email,
            firstName: realtor.first_name,
            lastName: realtor.last_name,
            displayName: `${realtor.first_name} ${realtor.last_name}`
          }
        });
      });
    })(req, res, next);
  }
);

app.get(
  '/auth/google',
  passport.authenticate('google', {
    scope: ['profile', 'email']
  })
);

app.get(
  '/auth/google/callback',
  passport.authenticate('google', { failureRedirect: '/' }),
  (req, res) => {
    // Redirect to frontend after successful Google login
    res.redirect(`${FRONTEND_URL}/main`);
  }
);

app.get('/auth/status', (req, res) => {
  res.json({
    authenticated: req.isAuthenticated(),
    user: req.user
  });
});

app.get('/auth/user', (req, res) => {
  if (req.isAuthenticated() && req.user) {
    const userData = {
      user: {
        id: req.user.id,
        email: req.user.email,
        firstName: req.user.firstName,
        lastName: req.user.lastName,
        displayName: `${req.user.firstName} ${req.user.lastName}`
      }
    };
    res.json(userData);
  } else {
    res.status(401).json({ message: 'Unauthorized' });
  }
});

app.get('/auth/logout', (req, res) => {
  req.logout((err) => {
    if (err) {
      console.error('Logout error:', err);
      return res.status(500).json({ error: 'Failed to log out' });
    }
    req.session.destroy((err) => {
      if (err) {
        console.error('Session destruction error:', err);
        return res.status(500).json({ error: 'Failed to destroy session' });
      }
      res.json({ message: 'Logged out successfully' });
    });
  });
});

// Helper: check if user is authenticated
function ensureAuthenticated(req, res, next) {
  if (req.isAuthenticated()) return next();
  return res.status(401).json({ message: 'Unauthorized' });
}

// Client (Buyer/Seller) Form Endpoints
app.post('/api/form/:realtorId', async (req, res) => {
  const realtorId = req.params.realtorId;
  const {
    firstName,
    lastName,
    phone,
    email,
    clientType,
    budget,
    location,
    amenities,
    property_images,
    notes,
    urgency,
    income,
    bankLoanEligibility,
    downPayment,
    canAffordDownPayment
  } = req.body;

  try {
    const insertQuery = `
      INSERT INTO clients
        (realtor_id, client_type, first_name, last_name, phone, email,
         budget, location, amenities, property_images, notes, created_at,
         urgency, income, bank_loan_eligibility, down_payment, can_afford_down_payment)
      VALUES
        ($1, $2, $3, $4, $5, $6,
         $7, $8, $9, $10, $11, NOW(),
         $12, $13, $14, $15, $16)
      RETURNING *
    `;

    const values = [
      realtorId,
      clientType,
      firstName,
      lastName,
      phone,
      email,
      budget || null,
      location || null,
      amenities || null,
      property_images || null,
      notes || null,
      urgency || null,
      income || null,
      bankLoanEligibility === true,
      downPayment || null,
      canAffordDownPayment === true
    ];

    const result = await pool.query(insertQuery, values);
    return res.json({
      message: 'Form submitted successfully',
      client: result.rows[0]
    });
  } catch (error) {
    console.error('Error saving form data:', error);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Get all clients for a specific realtor
app.get('/api/clients', ensureAuthenticated, async (req, res) => {
  try {
    const query = `
      SELECT * FROM clients 
      WHERE realtor_id = $1 
      ORDER BY created_at DESC
    `;
    const { rows } = await pool.query(query, [req.user.id]);
    return res.json(rows);
  } catch (error) {
    console.error('Error fetching clients:', error);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Pin/Unpin a client
app.put('/api/clients/:clientId/pin', ensureAuthenticated, async (req, res) => {
  const { clientId } = req.params;
  const { pinned } = req.body;
  try {
    const query = `
      UPDATE clients
      SET pinned = $1, updated_at = NOW()
      WHERE id = $2 AND realtor_id = $3
      RETURNING *
    `;
    const values = [pinned, clientId, req.user.id];
    const { rows } = await pool.query(query, values);
    if (rows.length === 0) {
      return res.status(404).json({ error: 'Client not found or not authorized' });
    }
    return res.json(rows[0]);
  } catch (error) {
    console.error('Error updating pin status:', error);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.put(
  '/api/realtor/settings',
  ensureAuthenticated,
  [
    body('firstName').optional().isString(),
    body('lastName').optional().isString(),
    body('email').optional().isEmail(),
    body('phoneNumber').optional().isMobilePhone(),
    body('password').optional().isLength({ min: 6 })
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { firstName, lastName, email, phoneNumber, password } = req.body;

    try {
      const realtor = await findRealtorById(req.user.id);
      if (!realtor) return res.status(404).json({ error: 'User not found' });

      // If Google-based account has no local password, block local password changes
      let hashedPassword = null;
      if (realtor.google_id && realtor.password == null && password) {
        return res
          .status(400)
          .json({ error: 'Cannot update password for an OAuth-based account.' });
      }
      if (password && !realtor.google_id) {
        hashedPassword = await bcrypt.hash(password, 10);
      }

      const updateQuery = `
        UPDATE realtors
        SET
          first_name = COALESCE($1, first_name),
          last_name = COALESCE($2, last_name),
          email = COALESCE($3, email),
          phone_number = COALESCE($4, phone_number),
          password = COALESCE($5, password),
          updated_at = NOW()
        WHERE id = $6
        RETURNING *
      `;
      const values = [
        firstName || null,
        lastName || null,
        email || null,
        phoneNumber || null,
        hashedPassword || null,
        req.user.id
      ];

      const { rows } = await pool.query(updateQuery, values);
      const updatedRealtor = rows[0];

      return res.json({
        message: 'Settings updated',
        user: {
          id: updatedRealtor.id,
          email: updatedRealtor.email,
          firstName: updatedRealtor.first_name,
          lastName: updatedRealtor.last_name,
          phoneNumber: updatedRealtor.phone_number
        }
      });
    } catch (error) {
      console.error('Settings update error:', error);
      return res.status(500).json({ error: 'Internal Server Error' });
    }
  }
);

app.post('/generate-link', ensureAuthenticated, async (req, res) => {
  const generatedLink = `${FRONTEND_URL}/form/${req.user.id}`;
  return res.json({ link: generatedLink });
});

const upload = multer({ storage: multer.MemoryStorage() });

app.post('/api/clients/import-csv', ensureAuthenticated, upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'No CSV file uploaded' });
    }

    // Mappings from client side
    const columnMapping = req.body.mapping ? JSON.parse(req.body.mapping) : {};

    // Parse the CSV
    const csvStream = new stream.Readable();
    csvStream.push(req.file.buffer);
    csvStream.push(null);

    let parsedRows = [];
    const parser = csvParser({
      columns: true, // treat first row as header
      skip_empty_lines: true
    });

    parser.on('readable', () => {
      let record;
      while ((record = parser.read()) !== null) {
        parsedRows.push(record);
      }
    });

    parser.on('end', async () => {
      // Now insert each row
      for (const row of parsedRows) {
        // Build an insert object based on the columnMapping
        const insertData = {
          realtor_id: req.user.id,
          client_type: row[columnMapping.clientType] || 'buyer', // default
          first_name: row[columnMapping.firstName] || 'Unknown',
          last_name: row[columnMapping.lastName] || 'Unknown',
          phone: row[columnMapping.phone] || null,
          email: row[columnMapping.email] || null,
          budget: row[columnMapping.budget] || null,
          location: row[columnMapping.location] || null,
          amenities: row[columnMapping.amenities] || null,
          // Add fields here
        };

        // Insert
        await pool.query(
          `INSERT INTO clients (realtor_id, client_type, first_name, last_name, phone, email,
                                budget, location, amenities, pinned, created_at)
           VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9, false, NOW())`,
          [
            insertData.realtor_id,
            insertData.client_type,
            insertData.first_name,
            insertData.last_name,
            insertData.phone,
            insertData.email,
            insertData.budget,
            insertData.location,
            insertData.amenities
          ]
        );
      }

      return res.json({ message: 'CSV import completed', count: parsedRows.length });
    });

    parser.on('error', (err) => {
      console.error('CSV parser error:', err);
      return res.status(500).json({ error: 'CSV parse error' });
    });

    csvStream.pipe(parser);

  } catch (error) {
    console.error('CSV import error:', error);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.get('/auth/check', (req, res) => {
  res.json({
    authenticated: req.isAuthenticated(),
    user: req.user,
    session: req.session
  });
});

app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
  console.log('Environment:', process.env.NODE_ENV);
});
"


frontend:
package.json:
"
{
  "name": "ai-realtor-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.7",
    "papaparse": "^5.5.2",
    "qrcode.react": "^4.2.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.28.0",
    "react-scripts": "^5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "@babel/plugin-transform-private-property-in-object": "^7.25.8"
  },
  "engines": {
    "node": "22.11.0"
  }
}
"


public:
manifest.json:
"
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
"


src:
App.jsx:
"
import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import axios from 'axios';

import HomeApp from './components/Home/HomeApp';
import RealtorApp from './components/Realtor/RealtorApp';
import MainPage from './components/MainPage/MainPage';
import SettingsPage from './components/Settings/SettingsPage';
import FormPage from './components/Form/FormPage';
import SignIn from './components/Auth/SignIn';
import SignUp from './components/Auth/SignUp';
import PrivateRoute from './components/Auth/PrivateRoute';

import './styles/Navbar.css';
import './styles/Realtor/global.css';
import './styles/darkmode.css';

function App() {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const response = await axios.get('/auth/status');
        if (response.data.authenticated) {
          setUser(response.data.user);
          // If user is already authenticated and hits /main, redirect to /realtor
          if (window.location.pathname === '/main') {
            window.location.replace('/realtor');
          }
        }
      } catch (error) {
        console.error('Auth check error:', error);
      } finally {
        setIsLoading(false);
      }
    };

    checkAuth();
  }, []);

  const handleLogout = async () => {
    try {
      await axios.get('/auth/logout');
      setUser(null);
      window.location.href = '/';
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <Router>
      <Routes>
        <Route path="/" element={<HomeApp user={user} onLogout={handleLogout} />} />
        
        {/* If user is logged in, /main -> /realtor, else /signin */}
        <Route 
          path="/main" 
          element={user ? <Navigate to="/realtor" /> : <Navigate to="/signin" />} 
        />

        <Route
          path="/realtor"
          element={
            <PrivateRoute user={user}>
              <RealtorApp user={user} onLogout={handleLogout} />
            </PrivateRoute>
          }
        />
        <Route 
          path="/signin" 
          element={user ? <Navigate to="/realtor" /> : <SignIn setUser={setUser} />} 
        />
        <Route 
          path="/signup" 
          element={user ? <Navigate to="/realtor" /> : <SignUp setUser={setUser} />} 
        />

        <Route
          path="/settings"
          element={
            <PrivateRoute user={user}>
              <SettingsPage user={user} setUser={setUser} />
            </PrivateRoute>
          }
        />

        {/* Public form page */}
        <Route path="/form/:realtorId" element={<FormPage />} />
      </Routes>
    </Router>
  );
}

export default App;
"

index.js:
"
import React from 'react';
import ReactDOM from 'react-dom';
import axios from 'axios';
import App from './App';

import './styles/Home/global.css';

const isProd = (process.env.REACT_APP_NODE_ENV === 'production');
const backendUrl = isProd
  ? process.env.REACT_APP_BACKEND_URL || 'https://realtoriqbackend.onrender.com'
  : 'http://localhost:5000';

// Set default axios configuration for the frontend
axios.defaults.baseURL = backendUrl;
axios.defaults.withCredentials = true;

console.log('React Environment:', process.env.REACT_APP_NODE_ENV);
console.log('Using Backend URL:', axios.defaults.baseURL);

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
"


components:
Navbar.jsx:
"
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import '../styles/Navbar.css';

const Navbar = ({ user, onLogout }) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  const getUserDisplayName = () => {
    if (user?.firstName && user?.lastName) {
      return `${user.firstName} ${user.lastName}`;
    }
    return user?.displayName || user?.email || 'User';
  };

  return (
    <nav className="navbar">
      <div className="navbar-content">
        <Link to="/" className="navbar-brand">
          AI Realtor
        </Link>
        <div className="nav-links">
          <Link to="/">Home</Link>
          <Link to="/buy">Buy</Link>
          <Link to="/realtor">Realtor</Link>
          {user ? (
            <div className="user-menu">
              <button 
                className="user-menu-button"
                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
              >
                <span className="user-name">{getUserDisplayName()}</span>
                <span className="dropdown-arrow">▼</span>
              </button>
              {isDropdownOpen && (
                <div className="user-dropdown">
                  <button onClick={onLogout}>Logout</button>
                </div>
              )}
            </div>
          ) : (
            <Link to="/signin">Sign In</Link>
          )}
        </div>
      </div>
    </nav>
  );
};

export default Navbar; 
"


Auth:
PrivateRoute.jsx:
"
import React from 'react';
import { Navigate } from 'react-router-dom';

const PrivateRoute = ({ user, children }) => {
  const isAuthenticated = !!user; // Check if user exists
  
  return isAuthenticated ? children : <Navigate to="/signin" />;
};

export default PrivateRoute;
"

SignIn.jsx:
"
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../../styles/Auth/Auth.css';

const SignIn = ({ setUser }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/auth/login', { email, password });
      setUser({
        id: response.data.user.id,
        email: response.data.user.email,
        firstName: response.data.user.firstName,
        lastName: response.data.user.lastName,
        displayName: response.data.user.displayName
      });
      navigate('/realtor');
    } catch (error) {
      console.error('Login error:', error.response?.data || error.message);
      alert(error.response?.data?.message || 'Login failed');
    }
  };

  const handleGoogleLogin = () => {
    // Use the environment variable
    const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';
    window.location.href = `${backendUrl}/auth/google`;
  };

  return (
    <div className="auth-container">
      <div className="auth-form">
        <h2>Sign In</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          <div className="form-group">
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>

          <button type="submit" className="auth-button">
            Sign In
          </button>
        </form>

        <div className="divider">or</div>

        <button onClick={handleGoogleLogin} className="google-button">
          Login with Google
        </button>

        <p className="auth-link">
          Don&apos;t have an account? <Link to="/signup">Sign Up</Link>
        </p>
      </div>
    </div>
  );
};

export default SignIn;
"

SignUp.jsx:
"
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../../styles/Auth/Auth.css';

const SignUp = ({ setUser }) => {
  const [firstName, setFirstName] = useState(''); // For 'firstName'
  const [lastName, setLastName] = useState(''); // For 'lastName'
  const [email, setEmail] = useState(''); // For 'email'
  const [password, setPassword] = useState(''); // For 'password'
  const [confirmPassword, setConfirmPassword] = useState(''); // For 'confirmPassword'
  const [phoneNumber, setPhoneNumber] = useState(''); // For 'phoneNumber'

  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Check if passwords match
    if (password !== confirmPassword) {
      alert('Passwords do not match.');
      return;
    }

    try {
      const response = await axios.post('/auth/register', {
        firstName,
        lastName,
        email,
        password,
        phoneNumber,
      });

      console.log('Registration successful:', response.data);

      setUser({
        id: response.data.user.id,
        email: response.data.user.email,
        firstName: response.data.user.firstName,
        lastName: response.data.user.lastName,
        displayName: response.data.user.displayName,
      });

      navigate('/realtor');
    } catch (error) {
      console.error('Registration error:', error.response?.data || error.message);
      alert(error.response?.data?.message || 'Registration failed');
    }
  };

  return (
    <div className="auth-container">
      <div className="auth-form">
        <h2>Sign Up</h2>
        <form onSubmit={handleSubmit}>
          {/* First Name */}
          <div className="form-group">
            <input
              type="text"
              placeholder="First Name"
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
              required
            />
          </div>

          {/* Last Name */}
          <div className="form-group">
            <input
              type="text"
              placeholder="Last Name"
              value={lastName}
              onChange={(e) => setLastName(e.target.value)}
              required
            />
          </div>

          {/* Phone Number */}
          <div className="form-group">
            <input
              type="tel"
              placeholder="Phone Number"
              value={phoneNumber}
              onChange={(e) => setPhoneNumber(e.target.value)}
            />
          </div>

          {/* Email */}
          <div className="form-group">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          {/* Password */}
          <div className="form-group">
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>

          {/* Confirm Password */}
          <div className="form-group">
            <input
              type="password"
              placeholder="Confirm Password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
            />
          </div>

          {/* Submit Button */}
          <button type="submit" className="auth-button">
            Register
          </button>
        </form>

        {/* Link to Sign In */}
        <p className="auth-link">
          Already have an account? <Link to="/signin">Sign In</Link>
        </p>
      </div>
    </div>
  );
};

export default SignUp;
"


Buy:
BuyApp.jsx:
"
"


Form:
FormPage.jsx:
"
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import '../../styles/Form/FormPage.css';

function FormPage() {
  const { realtorId } = useParams();

  const [clientType, setClientType] = useState('buyer');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [phone, setPhone] = useState('');
  const [email, setEmail] = useState('');
  const [budget, setBudget] = useState('');
  const [location, setLocation] = useState('');
  const [amenities, setAmenities] = useState('');
  const [propertyImages, setPropertyImages] = useState([]);
  const [notes, setNotes] = useState('');
  const [submitted, setSubmitted] = useState(false);

  const [urgency, setUrgency] = useState('Not specified');
  const [income, setIncome] = useState('');

  // Instead of checkbox for bank loan, we use YES/NO buttons
  const [bankLoanEligibility, setBankLoanEligibility] = useState(false);

  // Down payment
  const [downPayment, setDownPayment] = useState('');
  const [canAffordDownPayment, setCanAffordDownPayment] = useState(false);

  const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';

  // Calculate down payment whenever budget changes
  useEffect(() => {
    if (!budget) {
      setDownPayment('');
      return;
    }

    const b = parseFloat(budget);
    if (isNaN(b) || b <= 0) {
      setDownPayment('');
      return;
    }

    let calculated = 0;
    if (b <= 500000) {
      // if $500,000 or less => 5%
      calculated = b * 0.05;
    } else if (b > 500000 && b < 1500000) {
      // if $500k to $1.5M => 5% of first 500k, 10% of remainder
      const firstPortion = 500000 * 0.05; 
      const remainder = b - 500000;
      const secondPortion = remainder * 0.1;
      calculated = firstPortion + secondPortion;
    } else {
      // if $1.5M or more => 20%
      calculated = b * 0.2;
    }
    setDownPayment(calculated.toFixed(2));
  }, [budget]);

  const handleFormSubmit = async (e) => {
    e.preventDefault();
    try {
      if (!realtorId) {
        throw new Error('Realtor ID is missing');
      }

      const payload = {
        firstName,
        lastName,
        phone,
        email,
        clientType,
        budget: clientType === 'buyer' ? budget : null,
        location: clientType === 'buyer' ? location : null,
        amenities: clientType === 'buyer' ? amenities : null,
        property_images: clientType === 'seller' ? propertyImages : null,
        notes: clientType === 'seller' ? notes : null,
        urgency,
        income: income || null,
        bankLoanEligibility,
        downPayment: downPayment ? parseFloat(downPayment) : null,
        canAffordDownPayment
      };

      const response = await fetch(`${backendUrl}/api/form/${realtorId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json'
        },
        mode: 'cors',
        body: JSON.stringify(payload)
      });

      if (response.ok) {
        await response.json();
        setSubmitted(true);
        alert('Form submitted successfully!');
      } else {
        const errorData = await response.json().catch(() => null);
        throw new Error(errorData?.message || 'Form submission failed');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error submitting form. Please try again.');
    }
  };

  const handleFileChange = async (e) => {
    const files = Array.from(e.target.files);
    const promises = files.map((file) => {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (ev) => resolve(ev.target.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
      });
    });
    const base64Images = await Promise.all(promises);
    setPropertyImages([...propertyImages, ...base64Images]);
  };

  if (submitted) {
    return (
      <div className="form-page-container dark-mode">
        <h2>Thank you!</h2>
        <p>Your information has been submitted.</p>
      </div>
    );
  }

  return (
    <div className="form-page-container dark-mode">
      <h1>Contact Form</h1>
      {!realtorId && (
        <p style={{ color: 'red' }}>Warning: No realtor ID found!</p>
      )}
      <form onSubmit={handleFormSubmit} className="client-form">

        {/* First Name */}
        <div className="form-group">
          <label>First Name *</label>
          <input
            required
            value={firstName}
            onChange={(e) => setFirstName(e.target.value)}
            type="text"
          />
        </div>

        {/* Last Name */}
        <div className="form-group">
          <label>Last Name *</label>
          <input
            required
            value={lastName}
            onChange={(e) => setLastName(e.target.value)}
            type="text"
          />
        </div>

        {/* Phone */}
        <div className="form-group">
          <label>Phone *</label>
          <input
            required
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            type="text"
          />
        </div>

        {/* Email */}
        <div className="form-group">
          <label>Email *</label>
          <input
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            type="email"
          />
        </div>

        {/* Buyer or Seller */}
        <div className="form-group">
          <label>Are you buying or selling?</label>
          <select value={clientType} onChange={(e) => setClientType(e.target.value)}>
            <option value="buyer">Buyer</option>
            <option value="seller">Seller</option>
          </select>
        </div>

        {/* Urgency */}
        <div className="form-group">
          <label>Urgency</label>
          <select value={urgency} onChange={(e) => setUrgency(e.target.value)}>
            <option value="Immediate">Immediate</option>
            <option value="Around 4 months">Around 4 months</option>
            <option value="In the next year">In the next year</option>
            <option value="Not specified">Not specified</option>
          </select>
        </div>

        {/* Income */}
        <div className="form-group">
          <label>Income (annual or monthly)</label>
          <input
            type="number"
            value={income}
            onChange={(e) => setIncome(e.target.value)}
            placeholder="e.g. 75000"
          />
        </div>

        {/* Eligible for Bank Loan? - using yes/no */}
        <div className="form-group yes-no-buttons">
          <label>Eligible for Bank Loan?</label>
          <div className="button-group">
            <button
              type="button"
              className={bankLoanEligibility ? 'selected' : ''}
              onClick={() => setBankLoanEligibility(true)}
            >
              YES
            </button>
            <button
              type="button"
              className={!bankLoanEligibility ? 'selected' : ''}
              onClick={() => setBankLoanEligibility(false)}
            >
              NO
            </button>
          </div>
        </div>

        {/* Buyer fields if clientType == 'buyer' */}
        {clientType === 'buyer' && (
          <>
            <div className="form-group">
              <label>Budget</label>
              <input
                value={budget}
                onChange={(e) => setBudget(e.target.value)}
                type="number"
              />
            </div>

            <div className="form-group">
              <label>Location</label>
              <input
                value={location}
                onChange={(e) => setLocation(e.target.value)}
                type="text"
              />
            </div>

            <div className="form-group">
              <label>Amenities</label>
              <textarea
                value={amenities}
                onChange={(e) => setAmenities(e.target.value)}
              />
            </div>

            {/* Down Payment Calculation */}
            {downPayment && (
              <div className="form-group">
                <label>Estimated Down Payment Required</label>
                <input type="text" value={downPayment} readOnly />
              </div>
            )}

            {/* YES/NO for "Can you afford it?" */}
            {downPayment && (
              <div className="form-group yes-no-buttons">
                <label>Can you afford the above down payment?</label>
                <div className="button-group">
                  <button
                    type="button"
                    className={canAffordDownPayment ? 'selected' : ''}
                    onClick={() => setCanAffordDownPayment(true)}
                  >
                    YES
                  </button>
                  <button
                    type="button"
                    className={!canAffordDownPayment ? 'selected' : ''}
                    onClick={() => setCanAffordDownPayment(false)}
                  >
                    NO
                  </button>
                </div>
              </div>
            )}
          </>
        )}

        {/* Seller fields if clientType == 'seller' */}
        {clientType === 'seller' && (
          <>
            <div className="form-group">
              <label>Property Images</label>
              <input type="file" multiple onChange={handleFileChange} />
            </div>

            <div className="form-group">
              <label>Property Description / Notes</label>
              <textarea
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
              />
            </div>
          </>
        )}

        <button type="submit">Submit</button>
      </form>
    </div>
  );
}

export default FormPage;
"


Home:
AiChat.jsx:
"
import React from 'react';
import '../../styles/Home/AiChat.css';

const AiChat = () => {
  return (
    <section className="ai-chat">
      <div className="container">
        <h3>Talk to our AI Agent</h3>
        <button>Start Chat</button>
      </div>
    </section>
  );
};

export default AiChat;
"

FeaturedProperties.jsx:
"
import React, { useState, useEffect } from 'react';
import '../../styles/Home/FeaturedProperties.css';

const FeaturedProperties = () => {
  const properties = [
    {
      images: [
        process.env.PUBLIC_URL + '/images/image1.jpg',
        process.env.PUBLIC_URL + '/images/image2.jpg',
        process.env.PUBLIC_URL + '/images/image3.jpg'
      ],
      details: [
        { title: '3 Bedroom Modern House', price: '$800,000' },
        { title: '4 Bedroom Luxury Villa', price: '$1,200,000' },
        { title: '3 Bedroom Smart Home', price: '$950,000' },
      ]
    },
    {
      images: ['/images/image4.jpg', '/images/image5.jpg', '/images/image6.jpg'],
      details: [
        { title: '2 Bedroom Cottage', price: '$650,000' },
        { title: '2 Bedroom Condo', price: '$550,000' },
        { title: '2 Bedroom Townhouse', price: '$600,000' },
      ]
    },
    {
      images: ['/images/image7.jpg', '/images/image1.jpg', '/images/image2.jpg'],
      details: [
        { title: '5 Bedroom Estate', price: '$1,300,000' },
        { title: '4 Bedroom Manor', price: '$1,100,000' },
        { title: '5 Bedroom Mansion', price: '$1,500,000' },
      ]
    }
  ];

  // Separate state for each card
  const [firstCardIndex, setFirstCardIndex] = useState(0);
  const [secondCardIndex, setSecondCardIndex] = useState(0);
  const [thirdCardIndex, setThirdCardIndex] = useState(0);

  // Staggered intervals for each card
  useEffect(() => {
    // First card starts immediately and changes every 4 seconds
    const firstInterval = setInterval(() => {
      setFirstCardIndex(prev => (prev + 1) % 3);
    }, 4000);

    // Second card starts after 2 seconds delay
    const secondStart = setTimeout(() => {
      setSecondCardIndex(1); // Start with second image
      // Then continue every 4 seconds
      const secondInterval = setInterval(() => {
        setSecondCardIndex(prev => (prev + 1) % 3);
      }, 4000);
      
      return () => clearInterval(secondInterval);
    }, 2000);

    // Third card starts after 4 seconds delay
    const thirdStart = setTimeout(() => {
      setThirdCardIndex(2); // Start with third image
      // Then continue every 4 seconds
      const thirdInterval = setInterval(() => {
        setThirdCardIndex(prev => (prev + 1) % 3);
      }, 4000);
      
      return () => clearInterval(thirdInterval);
    }, 4000);

    return () => {
      clearInterval(firstInterval);
      clearTimeout(secondStart);
      clearTimeout(thirdStart);
    };
  }, []);

  return (
    <section className="featured-properties">
      <div className="containerProp">
        <h3>Featured Properties</h3>
        <div className="property-grid">
          <div className="property">
            <div className="property-image-container">
              {properties[0].images.map((img, imgIndex) => (
                <div
                  key={imgIndex}
                  className={`property-image ${imgIndex === firstCardIndex ? 'active' : ''}`}
                >
                  <img src={img} alt={`Property 1`} />
                </div>
              ))}
            </div>
            <div className="property-details">
              <p>{properties[0].details[firstCardIndex].title}</p>
              <p className="price">{properties[0].details[firstCardIndex].price}</p>
            </div>
          </div>

          <div className="property">
            <div className="property-image-container">
              {properties[1].images.map((img, imgIndex) => (
                <div
                  key={imgIndex}
                  className={`property-image ${imgIndex === secondCardIndex ? 'active' : ''}`}
                >
                  <img src={img} alt={`Property 2`} />
                </div>
              ))}
            </div>
            <div className="property-details">
              <p>{properties[1].details[secondCardIndex].title}</p>
              <p className="price">{properties[1].details[secondCardIndex].price}</p>
            </div>
          </div>

          <div className="property">
            <div className="property-image-container">
              {properties[2].images.map((img, imgIndex) => (
                <div
                  key={imgIndex}
                  className={`property-image ${imgIndex === thirdCardIndex ? 'active' : ''}`}
                >
                  <img src={img} alt={`Property 3`} />
                </div>
              ))}
            </div>
            <div className="property-details">
              <p>{properties[2].details[thirdCardIndex].title}</p>
              <p className="price">{properties[2].details[thirdCardIndex].price}</p>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default FeaturedProperties;
"

Footer.jsx:
"
import React from 'react';
import { Link } from 'react-router-dom';
import '../../styles/Home/Footer.css';

const Footer = () => {
  return (
    <footer className="footer">
      <div className="footer-content">
        {/* Company Section */}
        <div className="footer-section">
          <h3>Company</h3>
          <ul>
            <li><Link to="/about">About Us</Link></li>
            <li><Link to="/features">Features</Link></li>
            <li><Link to="/pricing">Pricing</Link></li>
          </ul>
        </div>

        {/* Support Section */}
        <div className="footer-section">
          <h3>Support</h3>
          <ul>
            <li><Link to="/contact">Contact Us</Link></li>
            <li><Link to="/faq">Faq</Link></li>
          </ul>
        </div>

        {/* Resources Section */}
        <div className="footer-section">
          <h3>Resources</h3>
          <ul>
            <li><Link to="/testimonials">Testimonials</Link></li>
            <li><Link to="/benefits">Benefits For Realtors</Link></li>
          </ul>
        </div>

        {/* Newsletter Section */}
        <div className="footer-section newsletter">
          <h3>Stay Updated</h3>
          <p>Subscribe to our newsletter for the latest updates and insights from RealtorIQ.</p>
          <div className="newsletter-form">
            <input type="email" placeholder="Enter your email" />
            <button type="submit">Subscribe</button>
          </div>
        </div>
      </div>

      {/* Bottom Bar */}
      <div className="footer-bottom">
        <p>© 2025 RealtorIQ. All rights reserved.</p>
        <div className="footer-links">
          <Link to="/terms">Terms & Conditions</Link>
          <Link to="/privacy">Privacy Policy</Link>
        </div>
        <div className="social-links">
          <a href="https://facebook.com" target="_blank" rel="noopener noreferrer">
            <i className="fab fa-facebook"></i>
          </a>
          <a href="https://linkedin.com" target="_blank" rel="noopener noreferrer">
            <i className="fab fa-linkedin"></i>
          </a>
          <a href="https://twitter.com" target="_blank" rel="noopener noreferrer">
            <i className="fab fa-twitter"></i>
          </a>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
"

Header.jsx:
"
import React, { useState, useRef, useEffect } from 'react';
import { Link } from 'react-router-dom';
import '../../styles/Home/Header.css';

const Header = ({ user, onLogout }) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  useEffect(() => {
    console.log('Header received user:', user);
    console.log('User display name:', user?.displayName);
    console.log('User name:', user?.name);
  }, [user]);

  return (
    <header className="containerHeader">
      <h1>AI Realtor</h1>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          <li><Link to="/buy">Buy</Link></li>
          <li><Link to="/realtor">Realtor</Link></li>
          {user ? (
            <li className="user-menu" ref={dropdownRef}>
              <button
                className="user-menu-button"
                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
              >
                {user.firstName && user.lastName
                  ? `${user.firstName} ${user.lastName}`
                  : user.displayName || 'Welcome User'} ▼
              </button>
              {isDropdownOpen && (
                <div className="user-dropdown">
                  <button onClick={() => {
                    onLogout();
                    setIsDropdownOpen(false);
                  }}>Logout</button>
                </div>
              )}
            </li>
          ) : (
            <li><Link to="/signin" className="sign-in-link">Sign In</Link></li>
          )}
        </ul>
      </nav>
    </header>
  );
};

export default Header;
"

Hero.jsx:
"
import React from 'react';
import '../../styles/Home/Hero.css';

const Hero = () => {
  return (
    <section className="hero">
      <div className="containerHero">
        <h2>Welcome to AI Realtor</h2>
        <p>Finding your dream home by pairing a realtor with AI</p>
        <form action="#">
          <input type="text" placeholder="Search by city, address, or postal code" />
          <button type="submit">Get Started</button>
        </form>
      </div>
    </section>
  );
};

export default Hero;
"

HomeApp.jsx:
"
import React from 'react';
import Navbar from '../Navbar';
import Hero from './Hero';
import FeaturedProperties from './FeaturedProperties';
import Services from './Services';
import AiChat from './AiChat';
import RealEstateTrends from './RealEstateTrends';
// Removed ContactUs import temporarily

const HomeApp = () => {
  return (
    <div>
      <Navbar />
      <Hero />
      <FeaturedProperties />
      <Services />
      <AiChat />
      <RealEstateTrends />
      {/* Removed ContactUs component temporarily */}
    </div>
  );
};

export default HomeApp;
"

RealEstateTrends.jsx:
"
import React, { useState } from 'react';
import '../../styles/Home/RealEstateTrends.css';

const RealEstateTrends = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  
  const images = [
    '/images/trends.jpg',
    '/images/trends2.jpg',
    '/images/trends3.jpg'
  ];

  const handlePrev = () => {
    setCurrentIndex((prevIndex) => (prevIndex === 0 ? images.length - 1 : prevIndex - 1));
  };

  const handleNext = () => {
    setCurrentIndex((prevIndex) => (prevIndex === images.length - 1 ? 0 : prevIndex + 1));
  };

  return (
    <section className="real-estate-trends">
      <div className="container">
        <h3>Real Estate Trends</h3>
        <div className="trends-carousel">
          <button className="carousel-control prev" onClick={handlePrev}>❮</button>
          <div className="carousel-slide active">
            <img src={images[currentIndex]} alt={`Real Estate Trend ${currentIndex + 1}`} />
          </div>
          <button className="carousel-control next" onClick={handleNext}>❯</button>
        </div>
      </div>
    </section>
  );
};

export default RealEstateTrends;
"

Services.jsx:
"
import React from 'react';
import '../../styles/Home/Services.css';

const Services = () => {
  return (
    <section className="services-section">
      <div className="services-container">
        <h2 className="services-heading">Our Services</h2>
        <div className="services-grid">
          <div className="service-card">
            <div className="service-image-container">
              <img src={process.env.PUBLIC_URL + "/images/propertyvaluation.png"} alt="Property Valuation" />
            </div>
            <div className="service-details">
              <p>Property Valuation</p>
              <p className="description">Accurate property values using advanced machine learning algorithms.</p>
            </div>
          </div>

          <div className="service-card">
            <div className="service-image-container">
              <img src={process.env.PUBLIC_URL + "/images/markettrends.jpg"} alt="Market Insights" />
            </div>
            <div className="service-details">
              <p>Market Insights</p>
              <p className="description">Get informed with real-time market trends and predictions.</p>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Services;
"


MainPage:
MainPage.jsx:
"
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import RealtorApp from '../Realtor/RealtorApp';
import '../../styles/MainPage/MainPage.css';

function MainPage({ user, onLogout }) {
  const navigate = useNavigate();

  useEffect(() => {
    if (user) {
      navigate('/realtor');
    }
  }, [user, navigate]);

  return <RealtorApp user={user} onLogout={onLogout} />;
}

export default MainPage;
"


Realtor:
AiChat.jsx:
"
import React, { useEffect, useRef } from 'react';
import '../../styles/Realtor/AiChat.css';

const AiChat = () => {
    const botInstanceRef = useRef(null);

    useEffect(() => {
        const initializeBot = () => {
            try {

                const existingScript = document.querySelector(
                    'script[src="https://cdn.botpress.cloud/webchat/v2.2/inject.js"]'
                );

                if (!existingScript) {
                    const script1 = document.createElement('script');
                    script1.src = 'https://cdn.botpress.cloud/webchat/v2.2/inject.js';
                    script1.async = true;
                    document.body.appendChild(script1);
                }

                const script2 = document.createElement('script');
                script2.src = 'https://files.bpcontent.cloud/2025/01/29/18/20250129180946-OYG7OBFS.js';
                script2.async = true;
                document.body.appendChild(script2);

            } catch (error) {
                console.error('Error initializing Botpress Bot:', error);
            }
        };


        initializeBot();
    }, []);

    return (
        <section className="ai-chat-section expanded">
            <div id="myBot" className="landbot-container"></div>
        </section>
    );
};

export default AiChat;
"

Carousel.jsx:
"
import React, { useState } from 'react';
import '../../styles/Realtor/Carousel.css';

const Carousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);

  // Sample images or infographics for the carousel
  const images = [
    { src: 'infographic1.jpg', alt: 'Infographic 1' },
    { src: 'infographic2.jpg', alt: 'Infographic 2' },
    { src: 'infographic3.jpg', alt: 'Infographic 3' },
  ];

  const handlePrev = () => {
    setCurrentIndex((prevIndex) => (prevIndex === 0 ? images.length - 1 : prevIndex - 1));
  };

  const handleNext = () => {
    setCurrentIndex((prevIndex) => (prevIndex === images.length - 1 ? 0 : prevIndex + 1));
  };

  return (
    <div className="carousel">
      <button className="carousel-control prev" onClick={handlePrev}>
        ❮
      </button>
      <div className="carousel-slide">
        <img src={images[currentIndex].src} alt={images[currentIndex].alt} />
      </div>
      <button className="carousel-control next" onClick={handleNext}>
        ❯
      </button>
    </div>
  );
};

export default Carousel;
"

ClientCard.jsx:
"
import React from 'react';
import '../../styles/Realtor/ClientCard.css';

const ClientCard = ({ client, onSelect, onPinToggle }) => {
  return (
    <div className="client-card">
      <div className="client-header">
        <strong>
          {client.first_name} {client.last_name}
        </strong>
        <button
          className="pin-button"
          onClick={() => onPinToggle(client.id, client.pinned)}
        >
          {client.pinned ? 'Unpin' : 'Pin'}
        </button>
      </div>
      <div onClick={() => onSelect(client)} className="client-body">
        <p>{client.client_type === 'seller' ? 'Seller' : 'Buyer'}</p>
        <p>Created: {new Date(client.created_at).toLocaleString()}</p>
      </div>
    </div>
  );
};

export default ClientCard; 
"

ClientDetails.jsx:
"
import React from 'react';
import '../../styles/Realtor/ClientDetails.css';

const ClientDetails = ({ client, onClose }) => {
  return (
    <div className="client-detail">
      <h4>
        {client.first_name} {client.last_name} ({client.client_type})
      </h4>
      <p>Phone: {client.phone}</p>
      <p>Email: {client.email}</p>
      {client.client_type === 'seller' && (
        <>
          <p>Notes: {client.notes}</p>
          {client.property_images && client.property_images.length > 0 && (
            <div className="property-images">
              {client.property_images.map((url, idx) => (
                <img src={url} alt={`property-${idx}`} key={idx} />
              ))}
            </div>
          )}
        </>
      )}
      {client.client_type === 'buyer' && (
        <>
          <p>Budget: {client.budget}</p>
          <p>Location: {client.location}</p>
          <p>Amenities: {client.amenities}</p>
        </>
      )}
      <button onClick={onClose}>Close</button>
    </div>
  );
};

export default ClientDetails; 
"

CSVImport.jsx:
"
import React, { useState } from 'react';
import Papa from 'papaparse';

const CSVImport = () => {
  const [csvFile, setCsvFile] = useState(null);
  const [headers, setHeaders] = useState([]);
  const [sampleData, setSampleData] = useState([]);

  // The user selects which CSV column corresponds to each required field
  const [mapping, setMapping] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    email: '',
    clientType: '',
    budget: '',
    location: '',
    amenities: ''
  });

  const handleFileChange = (e) => {
    if (e.target.files.length) {
      setCsvFile(e.target.files[0]);
      parseCsvHeaders(e.target.files[0]);
    }
  };

  // Parse only the first 10 lines to get headers
  const parseCsvHeaders = (file) => {
    Papa.parse(file, {
      header: true,
      preview: 10,
      complete: (results) => {
        if (results.data && results.data.length) {
          setHeaders(results.meta.fields || []);
          setSampleData(results.data.slice(0, 5)); // show first 5 lines as sample
        }
      },
      error: (err) => {
        console.error('CSV parsing error:', err);
      }
    });
  };

  const handleMappingChange = (field, csvHeader) => {
    setMapping((prev) => ({ ...prev, [field]: csvHeader }));
  };

  const handleUpload = async () => {
    if (!csvFile) {
      alert('No file selected!');
      return;
    }

    const formData = new FormData();
    formData.append('file', csvFile);
    formData.append('mapping', JSON.stringify(mapping));

    try {
      const res = await fetch('/api/clients/import-csv', {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });

      if (!res.ok) {
        throw new Error('CSV import failed');
      }

      // Attempt to parse JSON; handle empty body
      const text = await res.text();
      if (!text) {
        alert('CSV import completed (no JSON body). Possibly 0 rows imported?');
        return;
      }

      // parse JSON
      const data = JSON.parse(text);
      alert(`CSV import completed successfully. Imported ${data.count} rows.`);
    } catch (error) {
      console.error(error);
      alert('Error importing CSV');
    }
  };

  return (
    <div
      style={{
        background: '#eee',
        padding: '1rem',
        borderRadius: '8px',
        maxHeight: '80vh',
        overflowY: 'auto',
      }}
    >
      <h2>CSV Import</h2>
      <input
        type="file"
        accept=".csv,text/csv"
        onChange={handleFileChange}
      />

      {headers.length > 0 && (
        <>
          <h3>Map CSV Columns</h3>
          <p>Choose which CSV column matches each client field:</p>
          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '1rem' }}>
            {Object.keys(mapping).map((field) => (
              <div key={field} style={{ minWidth: '200px' }}>
                <label>{field}:</label>
                <br />
                <select
                  value={mapping[field]}
                  onChange={(e) => handleMappingChange(field, e.target.value)}
                >
                  <option value="">Ignore</option>
                  {headers.map((hdr) => (
                    <option key={hdr} value={hdr}>
                      {hdr}
                    </option>
                  ))}
                </select>
              </div>
            ))}
          </div>

          <div style={{ marginTop: '1rem' }}>
            <button onClick={handleUpload}>Import CSV</button>
          </div>

          <h4>Sample Data (first 5 rows)</h4>
          <table
            style={{
              width: '100%',
              background: '#fff',
              borderCollapse: 'collapse',
            }}
          >
            <thead>
              <tr>
                {headers.map((hdr) => (
                  <th
                    key={hdr}
                    style={{ border: '1px solid #ccc', padding: '4px' }}
                  >
                    {hdr}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {sampleData.map((row, idx) => (
                <tr key={idx}>
                  {headers.map((hdr) => (
                    <td
                      key={`${idx}-${hdr}`}
                      style={{ border: '1px solid #ccc', padding: '4px' }}
                    >
                      {row[hdr]}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </>
      )}
    </div>
  );
};

export default CSVImport;
"

FormLinkGenerator.jsx:
"
import React, { useState } from 'react';
import { QRCodeSVG } from 'qrcode.react';
import '../../styles/Realtor/FormLinkGenerator.css';

const FormLinkGenerator = ({ user, generatedLink, onGenerateLink }) => {
  const [linkGenerated, setLinkGenerated] = useState(false);

  const [isShareOverlayOpen, setIsShareOverlayOpen] = useState(false);

  const [selectedPlatform, setSelectedPlatform] = useState('');
  const [postMessage, setPostMessage] = useState('');

  const realtorFullName = user ? `${user.firstName} ${user.lastName}` : 'Your Realtor';

  const formLink = generatedLink || `${window.location.origin}/form/${user?.id}`;

  const handleGenerateLink = () => {
    setLinkGenerated(true);
    if (onGenerateLink) {
      onGenerateLink();
    }
  };

  const handleCopyLink = () => {
    navigator.clipboard.writeText(formLink);
    alert('Link copied to clipboard');
  };

  // Open or close the overlay
  const toggleShareOverlay = () => {
    setIsShareOverlayOpen(!isShareOverlayOpen);
    // reset any existing selectedPlatform
    if (isShareOverlayOpen) {
      setSelectedPlatform('');
      setPostMessage('');
    }
  };

  // When user chooses a platform
  const handleSocialClick = (platform) => {
    setSelectedPlatform(platform);
    // Generate a default post message
    const defaultMessage = `Hey everyone, it's ${realtorFullName}! If you or anyone you know is looking to buy or sell, please fill out my client acquisition form here: ${formLink}`;
    setPostMessage(defaultMessage);
  };

  const handlePostToSocial = () => {
    alert(`Posted to ${selectedPlatform} with message:\n\n${postMessage}\n\n(Real integration not implemented)`);
    // reset
    setSelectedPlatform('');
    setPostMessage('');
    toggleShareOverlay();
  };

  return (
    <div className="form-link-generator">
      {!linkGenerated ? (
        <button className="generate-link-btn" onClick={handleGenerateLink}>
          Generate Client Form Link
        </button>
      ) : (
        <div className="generated-link-content">
          <div className="link-qr-container">
            <div className="link-section">
              <h3>Share Your Client Form</h3>
              <div className="link-display">
                <input type="text" value={formLink} readOnly />
                <div className="link-actions">
                  <button className="copy-btn" onClick={handleCopyLink}>
                    Copy Link
                  </button>
                  <button className="share-btn" onClick={toggleShareOverlay}>
                    Share
                  </button>
                </div>
              </div>
            </div>
            <div className="qr-section">
              <QRCodeSVG value={formLink} size={128} />
              <p>Scan QR Code</p>
            </div>
          </div>

          {/* Overlay for social sharing */}
          {isShareOverlayOpen && (
            <div className="share-overlay">
              <div className="share-overlay-content">
                <div className="overlay-header">
                  <h4>Choose a platform</h4>
                  <button className="close-overlay-button" onClick={toggleShareOverlay}>
                    ✕
                  </button>
                </div>
                <div className="social-buttons">
                  <button className="share-option" onClick={() => handleSocialClick('Facebook')}>
                    <i className="fab fa-facebook"></i> Facebook
                  </button>
                  <button className="share-option" onClick={() => handleSocialClick('Instagram')}>
                    <i className="fab fa-instagram"></i> Instagram
                  </button>
                  <button className="share-option" onClick={() => handleSocialClick('LinkedIn')}>
                    <i className="fab fa-linkedin"></i> LinkedIn
                  </button>
                </div>

                {/* If a platform is selected, show message editor */}
                {selectedPlatform && (
                  <div className="message-editor">
                    <h5>Preview your post for {selectedPlatform}:</h5>
                    <textarea
                      value={postMessage}
                      onChange={(e) => setPostMessage(e.target.value)}
                    />
                    <div className="post-buttons">
                      <button onClick={handlePostToSocial}>Post</button>
                      <button onClick={() => setSelectedPlatform('')}>Cancel</button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default FormLinkGenerator;
"

GeneratedLeads.jsx:
"
import React, { useState, useEffect } from 'react';
import '../../styles/Realtor/GeneratedLeads.css';

const GeneratedLeads = () => {
  const [leads, setLeads] = useState({
    sellers: [],
    buyers: []
  });

  const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';

  const getLeads = async () => {
    try {
      const response = await fetch(`${backendUrl}/api/clients`, {
        credentials: 'include',
        headers: {
          Accept: 'application/json'
        }
      });

      if (response.ok) {
        const clients = await response.json();
        // Group clients by type
        setLeads({
          sellers: clients.filter((client) => client.client_type === 'seller'),
          buyers: clients.filter((client) => client.client_type === 'buyer')
        });
      } else {
        console.error('Failed to fetch leads:', await response.text());
      }
    } catch (error) {
      console.error('Error fetching leads:', error);
    }
  };

  useEffect(() => {
    getLeads();
    // Optionally fetch every 30 seconds
    const intervalId = setInterval(getLeads, 30000);
    return () => clearInterval(intervalId);
  }, []);

  const LeadCard = ({ client }) => (
    <div className="lead-card">
      <div className="lead-header">
        <h4>
          {client.first_name} {client.last_name}
        </h4>
        <div className="lead-contact">
          <p>
            <i className="fas fa-phone"></i> {client.phone}
          </p>
          <p>
            <i className="fas fa-envelope"></i> {client.email}
          </p>
        </div>
      </div>
      <div className="lead-details">
        {client.client_type === 'buyer' ? (
          <>
            <p>
              <strong>Budget:</strong> ${client.budget}
            </p>
            <p>
              <strong>Location:</strong> {client.location}
            </p>
            <p>
              <strong>Amenities:</strong> {client.amenities}
            </p>
          </>
        ) : (
          <>
            <p>
              <strong>Notes:</strong> {client.notes}
            </p>
            {client.property_images && (
              <div className="property-images">
                {client.property_images.map((url, idx) => (
                  <img key={idx} src={url} alt={`Property ${idx + 1}`} />
                ))}
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );

  return (
    <section className="generated-leads">
      <div className="leads-header">
        <h2>Client Leads</h2>
        <p>All your client inquiries in one place</p>
      </div>

      <div className="leads-grid">
        <div className="leads-column">
          <div className="leads-section-header">
            <h3>Seller Clients</h3>
            <span className="lead-count">{leads.sellers.length} clients</span>
          </div>
          <div className="leads-list">
            {leads.sellers.length > 0 ? (
              leads.sellers.map((client) => <LeadCard key={client.id} client={client} />)
            ) : (
              <div className="no-leads">No seller clients yet</div>
            )}
          </div>
        </div>

        <div className="leads-column">
          <div className="leads-section-header">
            <h3>Buyer Clients</h3>
            <span className="lead-count">{leads.buyers.length} clients</span>
          </div>
          <div className="leads-list">
            {leads.buyers.length > 0 ? (
              leads.buyers.map((client) => <LeadCard key={client.id} client={client} />)
            ) : (
              <div className="no-leads">No buyer clients yet</div>
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

export default GeneratedLeads;
"

Header.jsx:
"
import React, { useState, useRef, useEffect } from 'react';
import { Link } from 'react-router-dom';
import '../../styles/Home/Header.css';

const Header = ({ user, onLogout }) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef(null);

  useEffect(() => {
    // Close dropdown when clicking outside
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <header className="containerHeader">
      <h1>AI Realtor</h1>
      <nav>
        <ul>
          <li>
            <Link to="/">Home</Link>
          </li>
          <li>
            <Link to="/buy">Buy</Link>
          </li>
          <li>
            <Link to="/realtor">Realtor</Link>
          </li>
          {user ? (
            // If user is logged in
            <>
              <li className="user-menu" ref={dropdownRef}>
                <button
                  className="user-menu-button"
                  onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                >
                  {user.firstName && user.lastName
                    ? `${user.firstName} ${user.lastName}`
                    : user.displayName || 'Welcome User'}{' '}
                  ▼
                </button>
                {isDropdownOpen && (
                  <div className="user-dropdown">
                    <button
                      onClick={() => {
                        onLogout();
                        setIsDropdownOpen(false);
                      }}
                    >
                      Logout
                    </button>
                  </div>
                )}
              </li>
            </>
          ) : (
            // If user is not logged in
            <>
              <li>
                <Link to="/signin" className="sign-in-link">
                  Sign In
                </Link>
              </li>
              <li>
                <Link to="/signup" className="sign-up-link">
                  Sign Up
                </Link>
              </li>
            </>
          )}
        </ul>
      </nav>
    </header>
  );
};

export default Header;
"

PerformanceOverview.jsx:
"
import React from 'react';
import '../../styles/Realtor/PerformanceOverview.css';

const PerformanceOverview = () => {
  return (
    <section className="performance-overview">
      <h2>Performance Overview</h2>
      <p>Check your selling metrics at a glance</p>
      <button className="view-details">View Details</button>

      <div className="stats">
        <div className="stat-box">
          <span className="stat-title">Total Properties Listed</span>
          <span className="stat-value">30</span>
        </div>
        <div className="stat-box">
          <span className="stat-title">Properties Sold</span>
          <span className="stat-value">15</span>
        </div>
        <div className="stat-box">
          <span className="stat-title">Average Selling Price</span>
          <span className="stat-value">$250,000</span>
        </div>
      </div>

      <div className="sales-trends">
        <h3>Sales Trends</h3>
        <div className="sales-chart">
          {/* Placeholder for the sales chart */}
        </div>
      </div>
    </section>
  );
};

export default PerformanceOverview;
"

RealtorApp.jsx:
"
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Navbar from '../Navbar';
import ClientCard from './ClientCard';
import ClientDetails from './ClientDetails';
import FormLinkGenerator from './FormLinkGenerator';
import PerformanceOverview from './PerformanceOverview';
import GeneratedLeads from './GeneratedLeads';
import RealtorProfileHeader from './RealtorProfileHeader';
import Footer from '../Home/Footer';
import Carousel from './Carousel';
import AiChat from './AiChat';
import CSVImport from './CSVImport';
import '../../styles/Realtor/RealtorApp.css';

function RealtorApp({ user, onLogout }) {
  const [clients, setClients] = useState([]);
  const [selectedClient, setSelectedClient] = useState(null);

  const [generatedLink, setGeneratedLink] = useState('');
  const navigate = useNavigate();

  // For showing/hiding CSV Import modal
  const [showCsvImport, setShowCsvImport] = useState(false);

  useEffect(() => {
    if (!user) {
      navigate('/signin');
      return;
    }
    fetchClients();

    // By default, set a local generated link
    if (user.id) {
      setGeneratedLink(`${window.location.origin}/form/${user.id}`);
    }
  }, [user, navigate]);

  const fetchClients = async () => {
    try {
      const res = await axios.get('/api/clients');
      setClients(res.data);
    } catch (err) {
      console.error('Error fetching clients:', err);
    }
  };

  const handlePinToggle = async (clientId, pinned) => {
    try {
      await axios.put(`/api/clients/${clientId}/pin`, { pinned: !pinned });
      fetchClients();
    } catch (err) {
      console.error('Error pinning/unpinning client:', err);
    }
  };

  const handleGenerateLink = async () => {
    try {
      const res = await axios.post('/generate-link');
      if (res.data && res.data.link) {
        setGeneratedLink(res.data.link);
      }
    } catch (error) {
      console.error('Error generating link:', error);
    }
  };

  return (
    <div className="realtor-app-container dark-mode">
      <Navbar user={user} onLogout={onLogout} />
      
      <div className="dashboard-content">
        <RealtorProfileHeader user={user} />

        <div className="client-form-section">
          <h2>Your Client Form</h2>
          <p>Share this link or QR code with your clients</p>
          <FormLinkGenerator
            user={user}
            generatedLink={generatedLink}
            onGenerateLink={handleGenerateLink}
          />
        </div>

        <div className="clients-section">
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <h3>Clients</h3>
            <button
              style={{
                backgroundColor: '#3f51b5',
                color: 'white',
                width: '40px',
                height: '40px',
                borderRadius: '50%',
                border: 'none',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}
              onClick={() => setShowCsvImport(true)}
            >
              {/* If you have Font Awesome loaded, use an icon: */}
              <i className="fas fa-plus" style={{ fontSize: '18px' }}></i>
              
              {/* Otherwise, you can do plain text:
                +
              */}
            </button>
          </div>

          <div className="clients-grid">
            {clients.map((client) => (
              <ClientCard
                key={client.id}
                client={client}
                onSelect={setSelectedClient}
                onPinToggle={handlePinToggle}
              />
            ))}
          </div>

          {selectedClient && (
            <ClientDetails
              client={selectedClient}
              onClose={() => setSelectedClient(null)}
            />
          )}

          {/* Our overlay for CSV import */}
          {showCsvImport && (
            <div
              style={{
                position: 'fixed',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                backgroundColor: 'rgba(0, 0, 0, 0.5)',
                zIndex: 9999,
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
              }}
            >
              <div
                style={{
                  background: '#fff',
                  borderRadius: '8px',
                  padding: '1rem',
                  width: '600px',
                  maxWidth: '90%',
                  maxHeight: '90vh',
                  overflowY: 'auto',
                  position: 'relative',
                }}
              >
                <button
                  style={{
                    position: 'absolute',
                    top: '10px',
                    right: '10px',
                    background: 'none',
                    border: 'none',
                    cursor: 'pointer',
                    fontSize: '1.2rem',
                  }}
                  onClick={() => setShowCsvImport(false)}
                >
                  ✕
                </button>
                <CSVImport />
              </div>
            </div>
          )}
        </div>

        <PerformanceOverview />
        <GeneratedLeads />

        <div className="ai-chat-container">
          <AiChat />
        </div>
        <Carousel />
      </div>

      <Footer />
    </div>
  );
}

export default RealtorApp;
"

RealtorProfileHeader.jsx:
"
import React from 'react';
import '../../styles/Realtor/RealtorProfileHeader.css';

const RealtorProfileHeader = ({ user }) => {
  return (
    <section className="realtor-profile-header">
      <div className="profile-info">
        <div className="profile-image">
          <div className="circle-placeholder"></div>
        </div>
        <div className="profile-text">
          <h2>{user ? `${user.firstName} ${user.lastName}` : 'User Name'}</h2>
          <div className="badge">Top Realtor</div>
          <p>Welcome to your Realtor Dashboard</p>
        </div>
      </div>
    </section>
  );
};

export default RealtorProfileHeader;
"


Settings:
SettingsPage.jsx:
"
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../../styles/Realtor/global.css';
import '../../styles/Settings/SettingsPage.css';

function SettingsPage({ user, setUser }) {
  const [firstName, setFirstName] = useState(user?.firstName || '');
  const [lastName, setLastName] = useState(user?.lastName || '');
  const [email, setEmail] = useState(user?.email || '');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [password, setPassword] = useState('');

  // fetch the latest user data in case it changed
  useEffect(() => {
    setFirstName(user?.firstName || '');
    setLastName(user?.lastName || '');
    setEmail(user?.email || '');
    setPhoneNumber(user?.phoneNumber || '');
  }, [user]);

  const handleSave = async () => {
    try {
      const response = await axios.put('/api/realtor/settings', {
        firstName,
        lastName,
        email,
        phoneNumber,
        password: password.trim() === '' ? undefined : password,
      });
      console.log('Settings updated:', response.data);
      // update front end user
      if (response.data.user) {
        setUser((prev) => ({
          ...prev,
          ...response.data.user
        }));
        alert('Settings saved!');
      }
    } catch (error) {
      console.error('Error updating settings:', error.response?.data || error.message);
      alert(error.response?.data?.error || 'Failed to update settings');
    }
  };

  return (
    <div className="settings-page dark-mode">
      <h2>Settings</h2>
      <div className="settings-form">
        <label>First Name</label>
        <input
          value={firstName}
          onChange={(e) => setFirstName(e.target.value)}
          type="text"
        />

        <label>Last Name</label>
        <input value={lastName} onChange={(e) => setLastName(e.target.value)} type="text" />

        <label>Email</label>
        <input value={email} onChange={(e) => setEmail(e.target.value)} type="email" />

        <label>Phone Number</label>
        <input
          value={phoneNumber}
          onChange={(e) => setPhoneNumber(e.target.value)}
          type="text"
        />

        {/* If user was created via Google OAuth, the backend won't allow password changes. */}
        <label>Password (Only for local accounts)</label>
        <input
          placeholder="Enter new password (optional)"
          onChange={(e) => setPassword(e.target.value)}
          type="password"
        />

        <button onClick={handleSave} className="save-button">
          Save
        </button>
      </div>
    </div>
  );
}

export default SettingsPage;
"


styles:
darkmode.css:
"
body {
    background-color: #121212;
    color: #ffffff;
    margin: 0;
    font-family: Arial, sans-serif;
  }
  
  /* Add additional dark theme styling here */
  
"

Navbar.css:
"
.navbar {
  width: 100%;
  background-color: #ffffff;
  padding: 1rem 2rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 0;
  z-index: 1000;
  margin: 0;
}

.navbar-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  margin: 0;
}

.navbar-brand {
  font-size: 1.5rem;
  font-weight: 600;
  color: #1a1a1a;
  text-decoration: none;
}

.nav-links {
  display: flex;
  align-items: center;
  gap: 2rem;
}

.nav-links a {
  color: #1a1a1a;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.2s ease;
}

.nav-links a:hover {
  color: var(--primary-color);
}

.user-menu {
  position: relative;
}

.user-menu-button {
  background: none;
  border: none;
  color: #1a1a1a;
  cursor: pointer;
  font-size: 16px;
  padding: 8px 12px;
  display: flex;
  align-items: center;
  gap: 8px;
  border-radius: 4px;
  transition: background-color 0.2s;
}

.user-menu-button:hover {
  background-color: rgba(0, 0, 0, 0.05);
}

.user-name {
  font-weight: 500;
}

.dropdown-arrow {
  font-size: 12px;
  opacity: 0.7;
}

.user-dropdown {
  position: absolute;
  top: calc(100% + 5px);
  right: 0;
  background: #ffffff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  min-width: 150px;
  border: 1px solid #e2e8f0;
}

.user-dropdown button {
  width: 100%;
  padding: 12px 16px;
  text-align: left;
  border: none;
  background: none;
  cursor: pointer;
  color: #1a1a1a;
  font-size: 14px;
  transition: background-color 0.2s;
}

.user-dropdown button:hover {
  background-color: #f7fafc;
}

@media (max-width: 768px) {
  .navbar-content {
    padding: 0 1rem;
  }
  
  .nav-links {
    gap: 15px;
  }
  
  .nav-links a {
    font-size: 16px;
  }
} 
"


Auth:
Auth.css:
"
.auth-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #000;
}

.auth-form {
  background-color: #000;
  padding: 2rem;
  border-radius: 8px;
  width: 100%;
  max-width: 400px;
}

.auth-form h2 {
  color: #fff;
  text-align: center;
  margin-bottom: 2rem;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group input {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #333;
  border-radius: 4px;
  background-color: transparent;
  color: #fff;
  outline: none;
}

.auth-button {
  width: 100%;
  padding: 0.75rem;
  background-color: #6c5ce7;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 1rem;
}

.google-button {
  width: 100%;
  padding: 0.75rem;
  background-color: #4285f4;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 1rem;
}

.divider {
  text-align: center;
  margin: 1rem 0;
  color: #666;
}

.auth-link {
  text-align: center;
  margin-top: 1rem;
  color: #666;
}

.auth-link a {
  color: #6c5ce7;
  text-decoration: none;
}

.auth-link a:hover {
  text-decoration: underline;
} 
"


Form:
FormPage.css:
"
/* Make sure the container is styled in dark mode */
.form-page-container.dark-mode {
  background-color: #121212;
  color: #ffffff;
  min-height: 100vh;
  padding: 2rem;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.form-page-container.dark-mode h1 {
  margin-bottom: 1.5rem;
  font-size: 2rem;
}

.form-page-container.dark-mode h2 {
  margin-bottom: 0.75rem;
  font-size: 1.5rem;
}

.form-page-container.dark-mode p {
  font-size: 1rem;
  color: #cccccc;
  margin-bottom: 1rem;
}

/* The main form wrapper */
.client-form {
  max-width: 500px;
  width: 100%;
  display: flex;
  flex-direction: column;
}

/* Each field group: label + input/textarea */
.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
}

/* Inputs, selects, textareas styled for dark mode */
.client-form input,
.client-form select,
.client-form textarea {
  width: 100%;
  padding: 0.5rem;
  background-color: #1e1e1e; /* dark background */
  color: #ffffff;           /* white text */
  border: 1px solid #333;   /* subtle border */
  border-radius: 4px;
  font-size: 1rem;
  outline: none;
}

.client-form textarea {
  min-height: 80px;
}

/* Submit button styling */
.client-form button {
  padding: 0.75rem;
  background-color: #3f51b5;
  color: #ffffff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  transition: background-color 0.2s ease;
}

.client-form button:hover {
  background-color: #2f4095;
}

/* Responsive tweaks */
@media (max-width: 600px) {
  .form-page-container.dark-mode {
    padding: 1rem;
  }
  
  .client-form {
    max-width: 100%;
  }
}

.yes-no-buttons {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.yes-no-buttons .button-group {
  display: flex;
  gap: 1rem;
}

.yes-no-buttons .button-group button {
  flex: 1;
  padding: 0.75rem;
  border: none;
  border-radius: 6px;
  background-color: #444444;
  color: #ffffff;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s, transform 0.2s;
}

/* Hover effect */
.yes-no-buttons .button-group button:hover {
  background-color: #666666;
  transform: translateY(-2px);
}

.yes-no-buttons .button-group button.selected {
  background-color: #3f51b5;
  color: #ffffff; 
}
"


Home:
AiChat.css:
"
.ai-chat {
    background-color: #000;
    padding: 60px 0;
    text-align: center;
    position: relative;
    overflow: hidden; /* Contain background effects */
}

.ai-chat .container {
    max-width: 800px;
    margin: 0 auto;
    position: relative;
    overflow: hidden;
    border: none; /* No extra border */
}

.ai-chat::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(white 1px, transparent 1px) 0 0, 
                linear-gradient(90deg, white 1px, transparent 1px) 0 0;
    background-size: 10px 10px; /* Higher density grid with thicker lines */
    opacity: 0.15; /* Slightly more visible grid */
    pointer-events: none;
    z-index: 1;
}

.ai-chat::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 300%;
    height: 200%;
    background: radial-gradient(circle, rgba(255, 169, 77, 0.3), transparent 70%);
    animation: dynamicMotion 6s linear infinite; /* Continuous motion */
    z-index: 0;
}

@keyframes dynamicMotion {
    0% {
        transform: translate(-100%, -50%) scale(1.5); /* Start off-screen left */
    }
    20% {
        transform: translate(0%, -25%) scale(1.8); /* Move to center */
    }
    30% {
        background: radial-gradient(circle, rgba(0, 0, 0, 1), rgba(0, 0, 0, 1) 80%); /* Fade to black */
        transform: translate(0%, -25%) scale(1.8);
    }
    50% {
        transform: translate(100%, -50%) scale(1.5); /* Move off-screen right */
    }
    70% {
        transform: translate(0%, -25%) scale(1.8); /* Move back to center */
    }
    80% {
        background: radial-gradient(circle, rgba(0, 0, 0, 1), rgba(0, 0, 0, 1) 80%); /* Fade to black */
        transform: translate(0%, -25%) scale(1.8);
    }
    100% {
        transform: translate(-100%, -50%) scale(1.5); /* Reset to start */
    }
}

.ai-chat h3 {
    font-size: 2.2rem;
    color: #fff; /* White text */
    margin-bottom: 25px;
    font-family: 'Poppins', sans-serif; /* Classy, light font */
    z-index: 2;
    position: relative;
}

.ai-chat button {
    padding: 12px 30px;
    background-color: #f03413e0; /* Consistent orange color */
    color: #000;
    font-size: 1.1rem;
    border: none;
    border-radius: 15px; /* Rounded rectangle */
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    z-index: 2;
    position: relative;
}

.ai-chat button:hover {
    background-color: rgb(255, 255, 255); /* Slightly darker orange on hover */
    transform: scale(1.02); /* Subtle hover effect */
}

.ai-chat button:active {
    transform: scale(0.98);
}

@media (max-width: 768px) {
    .ai-chat h3 {
        font-size: 1.8rem;
    }
    
    .ai-chat button {
        font-size: 1rem;
        padding: 10px 25px;
    }
}
"

FeaturedProperties.css:
"
/* Featured Properties - Playful Bubbly Layout */
.featured-properties {
    background-color: #f9fbfd; /* Soft, light background to blend well */
    color: #333;
    padding: 60px 0;
    text-align: center;
}

.containerProp {
    width: 98%;
    margin: 0 auto;
    padding: 0 20px;
}

.containerProp h3 {
    font-size: 2.3em;
    color: #ff6347;
    margin-bottom: 40px;
}

.property-grid {
    display: flex;
    justify-content: center;
    align-items: stretch;
    gap: 20px;
    flex-wrap: wrap;
    padding: 20px;
}

.property {
    background: #ffffff;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    width: 585px;
    height: 530px; /* Increased height */
    overflow: hidden;
    transition: transform 0.3s, box-shadow 0.3s;
    display: flex;
    flex-direction: column;
    margin-bottom: 20px;
}

.property:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
}

.property-image-container {
    position: relative;
    width: 100%;
    height: 400px; /* Fixed height for images */
    overflow: hidden;
    margin: 0;
    padding: 0;
    line-height: 0;
}

.property-image {
    position: absolute;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
}

.property-image.active {
    opacity: 1;
}

.property-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
}

.property-details {
    padding: 20px;
    text-align: center; /* Center the text */
    background-color: #ffffff;
    margin-top: auto;
}

.property-details p {
    font-size: 1.2em;
    margin: 10px 0;
    line-height: 1.5;
}

.property-details .price {
    font-size: 1.4em;
    color: #ff6347;
    font-weight: bold;
}

/* Responsive design */
@media (max-width: 2000px) {
    .property {
        width: 520px;
        height: 480px; /* Adjust height for smaller screens */
    }
    .property-image-container {
        height: 360px; /* Adjust image height */
    }
}

@media (max-width: 1800px) {
    .property {
        width: 475px;
        height: 450px; /* Adjust height for smaller screens */
    }
    .property-image-container {
        height: 330px; /* Adjust image height */
    }
}

@media (max-width: 1600px) {
    .property {
        width: 430px;
        height: 420px; /* Adjust height for smaller screens */
    }
    .property-image-container {
        height: 300px; /* Adjust image height */
    }
}

@media (max-width: 1400px) {
    .property {
        width: 385px;
        height: 400px; /* Adjust height for smaller screens */
    }
    .property-image-container {
        height: 280px; /* Adjust image height */
    }
}

@media (max-width: 768px) {
    .property {
        width: 100%;
        max-width: 585px;
        height: 520px; /* Ensure proper scaling for smaller screens */
    }
    .property-image-container {
        height: 400px;
    }
}

/* Optional: Add indicators */
.carousel-indicators {
    position: absolute;
    bottom: 10px;
    width: 100%;
    display: flex;
    justify-content: center;
    gap: 8px;
}

.indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    cursor: pointer;
}

.indicator.active {
    background: white;
}
"

Footer.css:
"
/* General Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
}

.footer {
    background-color: #000000;
    color: #ffffff;
    padding: 4rem 2rem 2rem;
    width: 100%;
}

.footer-content {
    max-width: 1440px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 4rem;
    margin-bottom: 4rem;
}

.footer-section h3 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    color: #ffffff;
}

.footer-section ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.footer-section ul li {
    margin-bottom: 1rem;
}

.footer-section ul li a {
    color: #a0aec0;
    text-decoration: none;
    transition: color 0.2s ease;
}

.footer-section ul li a:hover {
    color: #ffffff;
}

/* Newsletter Section */
.newsletter {
    grid-column: 4;
}

.newsletter p {
    color: #a0aec0;
    margin-bottom: 1.5rem;
    line-height: 1.5;
}

.newsletter-form {
    display: flex;
    gap: 1rem;
}

.newsletter-form input {
    flex: 1;
    padding: 0.75rem 1rem;
    border: 1px solid #404040;
    border-radius: 4px;
    background: transparent;
    color: #ffffff;
}

.newsletter-form button {
    padding: 0.75rem 1.5rem;
    background: #0066FF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.newsletter-form button:hover {
    background: #0052cc;
}

/* Footer Bottom */
.footer-bottom {
    max-width: 1440px;
    margin: 0 auto;
    padding-top: 2rem;
    border-top: 1px solid #404040;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.footer-bottom p {
    color: #a0aec0;
}

.footer-links {
    display: flex;
    gap: 2rem;
}

.footer-links a {
    color: #a0aec0;
    text-decoration: none;
    transition: color 0.2s ease;
}

.footer-links a:hover {
    color: #ffffff;
}

.social-links {
    display: flex;
    gap: 1.5rem;
}

.social-links a {
    color: #a0aec0;
    font-size: 1.25rem;
    transition: color 0.2s ease;
}

.social-links a:hover {
    color: #ffffff;
}

@media (max-width: 1024px) {
    .footer-content {
        grid-template-columns: repeat(2, 1fr);
        gap: 3rem;
    }

    .newsletter {
        grid-column: span 2;
    }
}

@media (max-width: 768px) {
    .footer-content {
        grid-template-columns: 1fr;
        gap: 2rem;
    }

    .newsletter {
        grid-column: 1;
    }

    .footer-bottom {
        flex-direction: column;
        gap: 1.5rem;
        text-align: center;
    }

    .footer-links {
        flex-direction: column;
        gap: 1rem;
    }
}
"

global.css:
"

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Poppins', sans-serif; /* Apply your desired font */
}

/* Make sure all elements inherit the global font */
body * {
    font-family: inherit; /* Ensures all elements inherit the body font */
}

/* Alternatively, to force it */
body * {
    font-family: 'Poppins', sans-serif !important;
}

  

.container {
    width: 80%;
    margin: 0 auto;
}



.featured-properties {
    padding: 50px 0;
    text-align: center;
}

.property-grid {
    display: flex;
    justify-content: space-around;
}

.property {
    border: 1px solid #ddd;
    padding: 20px;
    width: 30%;
}

.services {
    background-color: #f9f9f9;
    padding: 50px 0;
    text-align: center;
}

.service-grid {
    display: flex;
    justify-content: space-around;
}

.ai-chat {
    background-color: #ffe4e1;
    padding: 50px 0;
    text-align: center;
}

.ai-chat button {
    padding: 10px 20px;
    background-color: #ff6347;
    color: white;
    border: none;
    cursor: pointer;
}

.real-estate-trends {
    padding: 50px 0;
    text-align: center;
}

.trend-grid {
    display: flex;
    justify-content: space-around;
}

.chart-placeholder {
    width: 100px;
    height: 100px;
    background-color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
}

"

Header.css:
"
/* Remove all default margins and padding from body */
body, html {
    margin: 0;
    padding: 0;
}

/* Adjust header to remove all gaps */
.containerHeader {
    width: 100%;
    background-color: black;
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 60px;
    padding: 0;
    box-sizing: border-box;
}

h1 {
    color: white;
    margin-left: 85px;
    font-size: 24px;
    font-family: Georgia, serif;
}

nav {
    margin-right: 85px;
}

nav ul {
    list-style: none;
    display: flex;
    gap: 30px;
    margin: 0;
    padding: 0;
    align-items: center;
}

nav ul li a {
    color: white;
    text-decoration: none;
    font-size: 18px;
}

nav ul li a:hover {
    text-decoration: underline;
}

.user-menu {
    position: relative;
    height: 100%;
    display: flex;
    align-items: center;
}

.user-menu-button {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    font-size: 18px;
    padding: 8px 12px;
    display: flex;
    align-items: center;
    gap: 5px;
    font-family: inherit;
}

.user-menu-button:hover {
    opacity: 0.8;
}

.user-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    background-color: white;
    border-radius: 4px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    min-width: 120px;
    z-index: 1000;
    margin-top: 5px;
}

.user-dropdown button {
    width: 100%;
    padding: 12px 16px;
    text-align: left;
    border: none;
    background: none;
    cursor: pointer;
    color: #333;
    font-size: 16px;
}

.user-dropdown button:hover {
    background-color: #f5f5f5;
}

.sign-in-link {
    color: white;
    text-decoration: none;
    font-size: 18px;
}

.sign-in-link:hover {
    opacity: 0.8;
}

nav ul li.user-menu {
    display: flex;
    align-items: center;
    height: 100%;
}
"

Hero.css:
"
.hero {
    position: relative;
    padding: 80px 0;
    text-align: center;
    background-image: url('./images/snapedit_1729274083098.jpeg'); /* Replace with your actual image path */
    background-size: cover; /* Cover the entire section */
    background-position: center; /* Center the image */
    background-repeat: no-repeat; /* Prevent the image from repeating */
  }
  
  .containerHero {
    position: relative;
    z-index: 2; /* Ensures the container is above the background image */
    width: 75%;
    margin: 0 auto;
    padding: 30px;
    border-radius: 15px;
    background: rgba(255, 255, 255, 0.1); /* Semi-transparent white background */
    box-shadow: 0 12px 25px rgba(0, 0, 0, 0.3);
  }
  
  .containerHero h2 {
    font-size: 2.5em;
    color: #ff6347;
    margin-bottom: 15px;
  }
  
  .containerHero p {
    font-size: 1.2em;
    margin-bottom: 25px;
    color: #666;
  }
  
  .containerHero form {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
  }
  
  .containerHero input[type="text"] {
    padding: 10px;
    width: 350px;
    border: 1.5px solid #ff6347;
    border-radius: 10px;
    font-size: 1em;
  }
  
  .containerHero button {
    padding: 10px 20px;
    background-color: #ff6347;
    color: white;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    font-size: 1.1em;
    transition: background-color 0.3s;
  }
  
  .containerHero button:hover {
    background-color: #ff4500;
  }
  
"

RealEstateTrends.css:
"
/* Real Estate Trends Section - Clean and Informative */
.real-estate-trends {
    background-color: #ffffff;
    padding: 30px 0;
}

.container {
    width: 98%;
    margin: 0 auto;
    padding: 0 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.real-estate-trends h3 {
    text-align: center;
    font-size: 2.5em;
    color: #ff6347;
    margin-bottom: 20px;
}

.trends-carousel {
    position: relative;
    width: 800px;
    height: 400px;
    margin: 0 auto;
    overflow: hidden;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #f7f7f7;
}

.carousel-slide {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.carousel-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

/* Carousel control buttons */
.carousel-control {
    background-color: rgba(255, 255, 255, 0.8);
    border: none;
    color: #333;
    font-size: 2rem;
    cursor: pointer;
    padding: 0.5rem 1rem;
    transition: all 0.3s ease;
    position: absolute;
    z-index: 10;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.carousel-control:hover {
    background-color: rgba(255, 255, 255, 0.95);
    color: #ff6347;
}

.prev {
    left: 20px;
}

.next {
    right: 20px;
}

/* Updated responsive adjustments */
@media (max-width: 1400px) {
    .trends-carousel {
        width: 700px;
        height: 350px;
    }
}

@media (max-width: 900px) {
    .trends-carousel {
        width: 600px;
        height: 300px;
    }
}

@media (max-width: 768px) {
    .trends-carousel {
        width: 90%;
        height: 300px;
    }
    
    .carousel-control {
        width: 40px;
        height: 40px;
        font-size: 1.5rem;
    }
}
"

Services.css:
"
/* Services Section - Clean and Modern */
.services {
    background-color: #f9fbfd; /* Soft background to match Featured Properties */
    color: #333;
    padding: 60px 0;
    text-align: center;
}

.services .container {
    width: 85%;
    margin: 0 auto;
}

.services h3 {
    font-size: 2em;
    color: #ff6347; /* Consistent orange shade for heading */
    margin-bottom: 30px;
}

.service-grid {
    display: flex;
    justify-content: space-around;
    align-items: stretch;
    gap: 20px;
    flex-wrap: wrap; /* Ensures flexibility on smaller screens */
}

.service {
    background: #ffffff; /* White background for contrast */
    padding: 20px;
    border-radius: 15px; /* Slightly curved edges for consistency */
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
    width: 45%; /* Adjust width to fit two services next to each other */
    transition: transform 0.3s, box-shadow 0.3s;
}

.service:hover {
    transform: translateY(-5px); /* Slight lift on hover for interactivity */
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
}

.service h4 {
    font-size: 1.5em;
    color: #4a90e2; /* Consistent blue shade for subheadings */
    margin-bottom: 10px;
}

.service p {
    font-size: 1.1em;
    color: #555; /* Softer text color */
    margin-bottom: 8px;
}

.services-section {
    background-color: #000000;
    padding: 60px 0;
}

.services-container {
    width: 98%;
    margin: 0 auto;
    padding: 0 20px;
}

.services-heading {
    text-align: center;
    color: #ff6347;
    font-size: 2.5em;
    margin-bottom: 40px;
}

.services-grid {
    display: flex;
    justify-content: center;
    align-items: stretch;
    gap: 25px;
    flex-wrap: wrap;
    padding: 20px;
}

.service-card {
    background: #ffffff;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    width: 585px;
    overflow: hidden;
    transition: transform 0.3s, box-shadow 0.3s;
    display: flex;
    flex-direction: column;
    padding: 15px;
}

.service-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
}

.service-image-container {
    position: relative;
    width: 100%;
    height: 435px;
    overflow: hidden;
    margin: 0;
    padding: 0;
    line-height: 0;
    border-radius: 10px;
}

.service-image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
}

.service-details {
    padding: 20px;
    background: #ffffff;
    text-align: center;
    margin-top: 10px; /* Adjusted to make text visible */
}

.service-details p:first-child {
    font-size: 1.2em;
    color: #ff6347;
    font-weight: bold;
    margin: 0;
    padding: 0;
    line-height: 1.2;
}

.service-details .description {
    font-size: 1.1em;
    color: #333;
    margin-top: 15px;
    font-weight: normal;
    line-height: 1.2;
}

/* Responsive styles matching Featured Properties exactly */
@media (max-width: 2000px) {
    .service-card {
        width: 520px;
    }
    .service-image-container {
        height: 390px;
    }
}

@media (max-width: 1800px) {
    .service-card {
        width: 475px;
    }
    .service-image-container {
        height: 355px;
    }
}

@media (max-width: 1600px) {
    .service-card {
        width: 430px;
    }
    .service-image-container {
        height: 320px;
    }
}

@media (max-width: 1400px) {
    .service-card {
        width: 385px;
    }
    .service-image-container {
        height: 290px;
    }
}

@media (max-width: 768px) {
    .service-card {
        width: 100%;
        max-width: 585px;
    }
    .service-image-container {
        height: 435px;
    }
}
"


MainPage:
MainPage.css:
"
/*  */
.main-page-container {
    background-color: var(--background-light);
    color: var(--text-primary);
    min-height: 100vh;
    padding: 1rem;
  }
  
  .main-page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }
  
  .header-actions button {
    margin-left: 1rem;
  }
  
  .form-link-section {
    margin-bottom: 2rem;
  }
  
  .form-link-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .clients-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
    gap: 1rem;
  }
  
  .client-card {
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    padding: 0.75rem;
    border-radius: 8px;
    cursor: pointer;
    box-shadow: var(--shadow);
  }
  
  .client-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
  }
  
  .client-detail {
    position: fixed;
    bottom: 1rem;
    right: 1rem;
    background-color: var(--card-bg);
    padding: 1rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    max-width: 300px;
    max-height: 70vh;
    overflow-y: auto;
    color: var(--text-primary);
  }
  
"


Realtor:
AiChat.css:
"
/* AI Chat Section */
.ai-chat-section {
  width: 100%;
  margin: 0;
  padding: 0 8%;
  background: none;
  border: none;
}

.ai-chat-section.expanded {
  min-height: 600px;
  transform: translateY(0) scale(1);
  opacity: 1;
}

.ai-chat-initial {
  background: linear-gradient(135deg, #0ea5e9 0%, #0284c7 100%);
  position: relative;
  width: 100%;
  padding: 2rem;
  border-radius: 8px;
  color: white;
  text-align: center;
  overflow: hidden;
}

/* AI-themed animated effect */
.ai-chat-initial::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: repeating-linear-gradient(
    transparent,
    transparent 2px,
    rgba(255, 255, 255, 0.1) 2px,
    rgba(255, 255, 255, 0.1) 4px
  );
  animation: scan 5s linear infinite;
  pointer-events: none;
}

.ai-chat-initial::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(90deg, 
    rgba(14, 165, 233, 0.2),
    rgba(2, 132, 199, 0.2)
  );
  animation: pulse 2s ease-in-out infinite;
}

@keyframes scan {
  0% {
    transform: translateY(-50%) rotate(45deg);
  }
  100% {
    transform: translateY(50%) rotate(45deg);
  }
}

@keyframes pulse {
  0% {
    opacity: 0.5;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0.5;
  }
}

/* Make sure content stays above effects */
.ai-chat-initial * {
  position: relative;
  z-index: 1;
}

.ai-chat-initial:hover {
  background: linear-gradient(135deg, rgba(45,45,45,0.5) 0%, rgba(26,26,26,0.9) 100%);
}

.ai-chat-initial h3 {
  color: var(--text-primary);
  font-size: 1.5rem;
  margin-bottom: 1.5rem;
  font-weight: 600;
}

.ai-chat-initial button {
  background: var(--primary-color);
  color: white;
  border: none;
  padding: 0.75rem 2rem;
  border-radius: 8px;
  font-weight: 500;
  transition: all 0.3s ease;
}

.ai-chat-initial button:hover {
  transform: translateY(-2px) scale(1.05);
  box-shadow: 0 4px 12px rgba(0, 102, 255, 0.2);
}

.landbot-container {
  width: 100%;
  height: 600px;
  border-radius: 12px;
  overflow: hidden;
  position: relative;
  z-index: 9999;
  background: white;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@media (max-width: 768px) {
  .ai-chat-section {
    margin: 1rem;
  }

  .ai-chat-section.expanded {
    min-height: 400px;
  }

  .landbot-container {
    height: 400px;
  }

  .ai-chat-initial h3 {
    font-size: 1.2rem;
  }

  .ai-chat-initial button {
    font-size: 0.9rem;
    padding: 0.6rem 1.5rem;
  }
}

/* Update the close button styles */
.close-chat-button {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: rgba(0, 0, 0, 0.5);
  border: none;
  color: var(--text-primary);
  font-size: 1.5rem;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10000;
  border-radius: 50%;
  transition: all 0.2s ease;
  padding: 0;
  line-height: 1;
}

.close-chat-button:hover {
  background: rgba(0, 0, 0, 0.7);
  transform: none;
  box-shadow: none;
}

.close-chat-button:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.2);
}

.chat-content {
  max-width: 1440px;
  margin: 0 auto;
}

/* Remove any extra backgrounds or containers */
.ai-chat-container {
  background: none;
  box-shadow: none;
  border: none;
  padding: 0;
  margin: 0;
}
"

Carousel.css:
"
/* Container for the entire carousel with white background */
.carousel {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #fafbfc;
    border: 1px solid #edf2f7;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    position: relative;
    margin: 2rem auto;
    width: 85%;
    max-width: 1200px;
    z-index: 1; /* Lower z-index than chat */
  }
  
  /* Slide styling */
  .carousel-slide {
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border-radius: 8px;
    width: 100%;
    max-width: 600px;
    height: 300px; /* Adjust height based on the image size */
  }
  
  .carousel-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }
  
  /* Carousel control buttons */
  .carousel-control {
    background-color: transparent;
    border: none;
    color: #333;
    font-size: 2rem;
    cursor: pointer;
    padding: 0.5rem 1rem;
    transition: color 0.3s ease;
  }
  
  .carousel-control:hover {
    color: #007bff;
  }
  
  /* Positioning for Previous and Next buttons */
  .prev {
    position: absolute;
    left: 10px;
  }
  
  .next {
    position: absolute;
    right: 10px;
  }
  
"

ClientCard.css:
"
.client-card {
  background: linear-gradient(135deg, #111111 0%, #333333 100%);
  border: 1px solid #edf2f7;
  width: 85%;
  margin: 15px auto;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
  transition: transform 0.2s;
  color: white;
}

.client-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
}

.client-body {
  cursor: pointer;
}

.client-body p {
  margin: 8px 0;
  color: #e2e8f0;
}

.pin-button {
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  padding: 5px 10px;
  border-radius: 4px;
  color: white;
  cursor: pointer;
  transition: background 0.2s;
}

.pin-button:hover {
  background: rgba(255, 255, 255, 0.2);
} 
"

ClientDetails.css:
"
.client-detail {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: #2a2a2a;
  padding: 2rem;
  border-radius: 16px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  z-index: 1000;
  max-width: 600px;
  width: 90%;
}

.client-detail-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.7);
  z-index: 999;
}

.client-detail h4 {
  font-size: 1.5rem;
  color: #fff;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #444;
}

.client-detail-content {
  display: grid;
  gap: 1rem;
}

.client-detail p {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  color: #ddd;
  font-size: 1rem;
  padding: 0.5rem 0;
}

.client-detail i {
  color: #666;
  width: 20px;
}

.property-images {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
  gap: 1rem;
  margin-top: 1.5rem;
}

.property-images img {
  width: 100%;
  height: 120px;
  object-fit: cover;
  border-radius: 8px;
  transition: transform 0.2s;
}

.property-images img:hover {
  transform: scale(1.05);
}

.client-detail button {
  margin-top: 1.5rem;
  padding: 0.75rem 1.5rem;
  background: #444;
  border: none;
  border-radius: 8px;
  color: white;
  cursor: pointer;
  transition: background 0.2s;
  width: 100%;
}

.client-detail button:hover {
  background: #555;
}

@media (max-width: 768px) {
  .client-detail {
    padding: 1.5rem;
  }
  
  .property-images {
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  }
} 
"

FormLinkGenerator.css:
"
.form-link-generator {
  background: linear-gradient(135deg, #111111 0%, #333333 100%);
  width: 100%;
  margin: 20px 0;
  padding: 24px 8%;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(37, 99, 235, 0.1);
  color: white;
}

.generate-link-btn {
  width: 100%;
  padding: 16px;
  background: rgba(255, 255, 255, 0.1);
  color: white;
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 8px;
  font-size: 1.1em;
  cursor: pointer;
  transition: all 0.2s ease;
}

.generate-link-btn:hover {
  background: var(--hover-bg);
  transform: translateY(-2px);
}

.generated-link-content {
  width: 100%;
  margin-top: 20px;
}

.link-qr-container {
  display: flex;
  gap: 24px;
  align-items: flex-start;
  margin-bottom: 20px;
}

.link-section {
  flex: 2;
}

.link-section h3 {
  margin-bottom: 16px;
  color: var(--text-primary);
}

.link-display {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.link-display input {
  width: 100%;
  padding: 12px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background: rgba(255, 255, 255, 0.1);
  color: var(--text-primary);
}

.link-actions {
  display: flex;
  gap: 12px;
}

.copy-btn, .share-btn {
  padding: 10px 20px;
  background: var(--card-bg);
  color: var(--text-primary);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.copy-btn:hover, .share-btn:hover {
  background: var(--hover-bg);
  transform: translateY(-2px);
}

.qr-section {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 12px;
  background: rgba(255, 255, 255, 0.1);
  padding: 20px;
  border-radius: 12px;
}

.qr-section p {
  color: var(--text-primary);
}

.share-drawer {
  margin-top: 16px;
  display: flex;
  gap: 12px;
  padding: 16px;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 8px;
}

.share-option {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px 20px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background: var(--card-bg);
  color: var(--text-primary);
  cursor: pointer;
  transition: all 0.3s ease;
}

.share-option:hover {
  background: var(--hover-bg);
  transform: translateY(-2px);
}

@media (max-width: 768px) {
  .link-qr-container {
    flex-direction: column;
  }
  
  .qr-section {
    width: 100%;
    margin-top: 20px;
  }
}

.form-link-content {
  max-width: 1440px;
  margin: 0 auto;
} 

/* Overlay container that covers the whole screen */
.share-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.6);
  z-index: 9999;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* The content box inside the overlay */
.share-overlay-content {
  background: #fff;
  color: #333;
  border-radius: 10px;
  width: 400px;
  max-width: 90%;
  padding: 1.5rem;
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

/* Header with close button */
.overlay-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.close-overlay-button {
  background: none;
  border: none;
  font-size: 1.2rem;
  cursor: pointer;
}

/* Social share buttons in a row */
.social-buttons {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  gap: 1rem;
}

/* The message editor for customizing the post */
.message-editor textarea {
  width: 100%;
  height: 80px;
  border: 1px solid #ddd;
  border-radius: 6px;
  padding: 0.5rem;
  resize: none;
  outline: none;
  font-size: 0.95rem;
}

.post-buttons {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
}
"

GeneratedLeads.css:
"
.generated-leads {
  background: linear-gradient(135deg, #111111 0%, #333333 100%);
  width: 100%;
  margin: 0 0 2rem 0;
  padding: 2rem 8%;
  border-radius: 8px;
  height: 80vh;
}

.leads-content {
  max-width: 1440px;
  margin: 0 auto;
  height: 100%;
  display: flex;
  flex-direction: column;
}

.leads-header {
  text-align: center;
  margin-bottom: 2rem;
}

.leads-header h2 {
  font-size: 1.8rem;
  margin-bottom: 0.5rem;
  color: white;
}

.leads-header p {
  color: #e2e8f0;
}

.leads-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 2rem;
  height: calc(100% - 8rem);
  margin-bottom: 2rem;
}

.leads-column {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 8px;
  padding: 1.5rem;
  height: 100%;
  overflow-y: auto;
  
  scrollbar-width: thin;
  scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
}

.leads-column::-webkit-scrollbar {
  width: 6px;
}

.leads-column::-webkit-scrollbar-track {
  background: transparent;
}

.leads-column::-webkit-scrollbar-thumb {
  background-color: rgba(255, 255, 255, 0.3);
  border-radius: 3px;
}

.leads-section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.leads-section-header h3 {
  color: white;
  font-size: 1.2rem;
}

.lead-count {
  background: rgba(255, 255, 255, 0.1);
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.875rem;
}

.lead-card {
  background: rgba(255, 255, 255, 0.2);
  border-radius: 8px;
  padding: 1rem;
  margin-bottom: 1rem;
}

.lead-card:last-child {
  margin-bottom: 0;
}

.lead-header {
  margin-bottom: 1rem;
}

.lead-header h4 {
  color: white;
  margin-bottom: 0.5rem;
}

.lead-contact {
  font-size: 0.875rem;
  color: #e2e8f0;
}

.lead-details {
  font-size: 0.875rem;
  color: #e2e8f0;
}

.no-leads {
  text-align: center;
  padding: 2rem;
  color: #e2e8f0;
}

@media (max-width: 768px) {
  .leads-grid {
    grid-template-columns: 1fr;
    height: calc(100% - 10rem);
  }
  
  .generated-leads {
    height: 90vh;
  }
}
"

global.css:
"
/* Global styles for Realtor components */
:root {
  /* Updated color scheme */
  --primary-gradient: linear-gradient(to right, #1a1a1a, #2d2d2d);
  --primary-color: #0066FF;
  --secondary-color: #1a1a1a;
  --text-primary: #ffffff;
  --text-secondary: #a0aec0;
  --background-light: #ffffff;
  --card-bg: #1a1a1a;
  --hover-bg: #363636;
  --border-color: #404040;
  --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  
  /* Typography */
  --font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

/* Update global styles */
body {
  background-color: #ffffff;
  color: var(--text-primary);
  font-family: var(--font-family);
  margin: 0;
  padding: 0;
  width: 100%;
  min-height: 100vh;
  overflow-x: hidden; /* Prevent horizontal scroll */
}

#root {
  width: 100%;
  margin: 0;
  padding: 0;
  background: #ffffff;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* Common utility classes */
.container {
  width: 100%;
  margin: 0;
  padding: 0;
  background: #ffffff;
}

.card {
  background: var(--card-bg);
  border-radius: 12px;
  padding: 1.5rem;
  box-shadow: var(--shadow);
}

/* Common container styles */
.realtor-container {
  width: 100%;
  margin: 0;
  padding: 0;
  color: var(--text-primary);
}

/* Common button styles */
.realtor-btn {
  padding: 8px 16px;
  background: var(--secondary-color);
  border: none;
  border-radius: 4px;
  color: var(--text-primary);
  cursor: pointer;
  transition: background 0.2s;
}

.realtor-btn:hover {
  background: var(--hover-bg);
}

.realtor-btn-primary {
  background: var(--primary-color);
}

.realtor-btn-primary:hover {
  background: #45a049;
}

/* Common input styles */
.realtor-input {
  padding: 10px;
  border-radius: 6px;
  border: 1px solid var(--border-color);
  background: var(--secondary-color);
  color: var(--text-primary);
  width: 100%;
}

/* Common grid layouts */
.realtor-grid {
  display: grid;
  gap: 20px;
}

/* Common flex layouts */
.realtor-flex {
  display: flex;
  gap: 10px;
}

.realtor-flex-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

/* Common text styles */
.realtor-title {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 20px;
  color: var(--text-primary);
}

.realtor-subtitle {
  font-size: 1.2rem;
  font-weight: 500;
  color: var(--text-secondary);
}

/* Common spacing utilities */
.mt-20 {
  margin-top: 20px;
}

.mb-20 {
  margin-bottom: 20px;
}

.p-20 {
  padding: 20px;
}

/* Common animations */
.realtor-fade {
  transition: opacity 0.3s ease;
}

.realtor-scale {
  transition: transform 0.2s ease;
}

.realtor-scale:hover {
  transform: scale(1.02);
}

/* Responsive breakpoints */
@media (max-width: 768px) {
  .container {
    padding: 0 1rem;
  }
  
  .realtor-grid {
    grid-template-columns: 1fr;
  }
  
  .realtor-flex {
    flex-direction: column;
  }
}
"

Header.css:
"
/* Header container styling */
.containerHeader {
  width: 100%;
  background-color: black;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-sizing: border-box;
  height: 70px;
  padding: 0 40px;
}

.containerHeader h2{
  color: aliceblue;
  margin-top: auto;
}

/* User section styling */
.user-section {
  display: flex;
  align-items: center;
}


/* Navigation menu styling */
nav {
  margin-left: auto; /* Pushes the navigation links towards the right */
}

.nav-links {
  list-style: none;
  display: flex;
  gap: 30px;
}

.nav-links li a {
  color: white;
  text-decoration: none;
  font-size: 18px;
}

.nav-links li a:hover {
  text-decoration: underline;
}

/* Search section styling */
.search-section {
  display: flex;
  align-items: center;
  margin-left: -50px;
}

.search-input {
  padding: 8px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
  width: 250px; /* Ensures the search box is wide enough */
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .containerHeader {
    flex-direction: column;
    align-items: flex-start;
    padding: 10px 20px;
  }

  .nav-links {
    flex-direction: column;
    gap: 15px;
    align-items: flex-start;
  }

  .search-section {
    margin-top: 10px;
    width: 100%;
  }

  .search-input {
    width: 100%;
  }
}
"

PerformanceOverview.css:
"
.performance-overview {
  padding: 2rem;
  padding-left: 13rem;
  padding-right: 13rem;
  background: #fafbfc;
  color: #1e293b;
  text-align: center;
  font-family: 'Poppins', sans-serif;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
  border: 1px solid #edf2f7;
  width: 85%;
  margin: 0 auto;
}

.performance-overview h2 {
  font-size: 2rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.performance-overview p {
  font-size: 1rem;
  color: #6c6c6c;
  margin-bottom: 2rem;
}

.view-details {
  padding: 0.8rem 1.5rem;
  background-color: black;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-family: 'Poppins', sans-serif;
  font-size: 1rem;
  transition: background-color 0.3s ease;
}

.view-details:hover {
  background-color: #333;
}

.stats {
  display: flex;
  justify-content: space-between;
  margin: 2rem 0;
  text-align: left;
}

.stat-box {
  flex: 1;
  padding: 1.5rem;
  margin: 0 1rem;
  background: #ffffff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #edf2f7;
}

.stat-title {
  display: block;
  font-size: 1rem;
  color: #6c6c6c;
  margin-bottom: 0.5rem;
}

.stat-value {
  font-size: 1.5rem;
  font-weight: 600;
  color: black;
}

.sales-trends {
  margin-top: 2rem;
  text-align: left;
}

.sales-trends h3 {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 1rem;
}

.sales-chart {
  width: 100%;
  height: 200px;
  background-color: #eaeaea;
  border-radius: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
  color: #6c6c6c;
  font-size: 1rem;
  font-family: 'Poppins', sans-serif;
}
"

RealtorApp.css:
"
.realtor-app-container {
  width: 100%;
  margin: 0;
  padding: 0;
  background: #ffffff;
  min-height: 100vh;
  position: absolute;
  left: 0;
  right: 0;
  overflow-x: hidden; /* Prevent horizontal scroll */
}

.realtor-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding: 2rem;
  background: #ffffff;
  border-radius: 12px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.realtor-header h1 {
  color: #1a1a1a;
}

.welcome-text {
  color: #666666;
}

.header-actions {
  display: flex;
  gap: 10px;
}

.header-actions button {
  padding: 8px 16px;
  background: #444;
  border: none;
  border-radius: 4px;
  color: white;
  cursor: pointer;
  transition: background 0.2s;
}

.header-actions button:hover {
  background: #555;
}

.clients-section {
  margin-top: 30px;
}

.clients-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.dark-mode {
  background: #1a1a1a;
  color: white;
  min-height: 100vh;
}

.realtor-dashboard {
  width: 100%;
  min-height: 100vh;
  background-color: #ffffff;
  color: #2d3748;
  padding: 0;
  margin: 0;
}

.dashboard-container {
  width: 100%;
  margin: 0;
  padding: 0;
  background: #ffffff;
}

.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.main-content {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 2rem;
}

.left-panel {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.right-panel {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.card {
  background: white;
  border-radius: 15px;
  padding: 2rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: #fafbfc;
  border: 1px solid #edf2f7;
  padding: 1.5rem;
  border-radius: 12px;
  width: 95%;
  margin: 0 auto;
}

.stat-card h3 {
  color: #718096;
  font-size: 0.875rem;
  margin-bottom: 0.5rem;
}

.stat-card .value {
  font-size: 1.5rem;
  font-weight: 600;
  color: #2d3748;
}

.section-title {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  color: #2d3748;
}

.welcome-section {
  display: none;
}

.dashboard-content {
  width: 100%;
  margin: 0;
  padding: 2rem;
  background: #ffffff;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.ai-chat-container {
  padding: 0;
  margin: 0;
  background: none;
  box-shadow: none;
}

.carousel-section {
  margin-top: 1rem;
}

@media (max-width: 1200px) {
  .main-content {
    grid-template-columns: 1fr;
  }
  
  .realtor-dashboard {
    padding: 0;
  }
  
  .stats-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 768px) {
  .stats-grid {
    grid-template-columns: 1fr;
  }
}

.client-form-section,
.clients-section,
.performance-section,
.leads-section,
.ai-chat-container,
.carousel-section {
  background: #fafbfc;
  border: 1px solid #edf2f7;
  border-radius: 8px;
  width: 100%;
  padding: 2rem 8%;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03);
  color: #1e293b;
  margin: 0 0 1rem 0;
}

h2, h3 {
  color: #1e293b;
  font-weight: 600;
  margin-bottom: 1.5rem;
}

.clients-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 1.5rem;
  margin-top: 1.5rem;
}

/* Button styles */
button {
  background: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  padding: 0.75rem 1.5rem;
  font-weight: 500;
  transition: all 0.2s ease;
}

button:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 102, 255, 0.2);
}

/* Stats and metrics */
.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
}

/* Profile badge/status */
.top-realtor-badge {
  background: var(--primary-color);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.875rem;
  font-weight: 500;
}

/* Remove any max-width constraints */
.container,
.content-wrapper,
.section-wrapper {
  width: 100%;
  max-width: 100%;
  margin: 0;
  padding: 0;
}

.section-content {
  max-width: 1440px;
  margin: 0 auto;
} 
"

RealtorProfileHeader.css:
"
.realtor-profile-header {
  background: linear-gradient(135deg, #111111 0%, #333333 100%);
  width: 100%;
  margin: 0;
  padding: 2.5rem 8%;
  color: white;
  box-shadow: 0 4px 12px rgba(37, 99, 235, 0.1);
  border-radius: 8px;
}

.profile-info {
  width: 100%;
  max-width: 1440px;
  margin: 0 auto;
  display: flex;
  align-items: center;
  gap: 2rem;
}

.profile-image .circle-placeholder {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: var(--primary-color);
  border: 3px solid var(--border-color);
}

.profile-text h2 {
  font-size: 1.8rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: var(--text-primary);
}

.profile-text .badge {
  display: inline-block;
  padding: 0.4rem 1rem;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  font-size: 0.875rem;
  margin-bottom: 0.75rem;
  color: var(--text-primary);
  box-shadow: var(--shadow);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.profile-text p {
  color: var(--text-secondary);
  font-size: 1rem;
}

.profile-actions {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  position: relative;
}

.generate-link {
  padding: 0.8rem 2.5rem;
  background-color: black;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-family: 'Poppins', sans-serif;
  font-size: 1rem;
  text-align: center;
  transition: background-color 0.3s ease;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.generate-link:hover {
  background-color: #333;
}

.generated-link-box {
  display: flex;
  align-items: center;
  background-color: black;
  color: white;
  border-radius: 5px;
  width: 100%;
  max-width: 400px;
  box-shadow: inset 0 4px 8px rgba(0, 0, 0, 0.4);
}

.generated-link {
  font-size: 1rem;
  padding: 5px 10px;
  color: white;
  flex-grow: 1;
  margin-right: 1rem;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.copy-link, .share-link {
  background-color: white;
  color: black;
  margin-right: 7.5px;
  border-radius: 5px;
  font-weight: 500;
  cursor: pointer;
  padding: 0.5rem 1rem;
  transition: background-color 0.3s ease;
}

.copy-link:hover, .share-link:hover {
  background-color: #ddd;
}

/* Share drawer styling */
.share-drawer {
  position: absolute;
  top: 100%;
  right: 0;
  background-color: #333;
  color: white;
  border-radius: 8px;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
  padding: 1rem;
  margin-top: 10px;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.share-option {
  background-color: #444;
  color: white;
  border: none;
  padding: 0.8rem;
  border-radius: 5px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.share-option:hover {
  background-color: #555;
}

@media (max-width: 768px) {
  .realtor-profile-header {
    padding: 1.5rem;
  }

  .profile-info {
    flex-direction: column;
    text-align: center;
    gap: 1rem;
  }
}
"


Settings:
SettingsPage.css:
"
.settings-page.dark-mode {
    background-color: #121212;
    color: #ffffff;
    min-height: 100vh;
    padding: 2rem;
  }
  
  .settings-form {
    display: flex;
    flex-direction: column;
    max-width: 400px;
  }
  
  .settings-form label {
    margin-top: 1rem;
    margin-bottom: 0.5rem;
  }
  
  .settings-form input {
    padding: 0.5rem;
    border: 1px solid #333;
    border-radius: 4px;
    background-color: #1e1e1e;
    color: #fff;
  }
  
  .save-button {
    margin-top: 2rem;
    padding: 0.75rem 1.5rem;
    background-color: #3f51b5;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    color: #fff;
  }
  
"


